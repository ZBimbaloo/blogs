<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LAYDATE日历插件使用</title>
      <link href="/xiaocong/2019/03/06/LaydateJs/"/>
      <url>/xiaocong/2019/03/06/LaydateJs/</url>
      
        <content type="html"><![CDATA[<p>LAYDATE日历插件使用</p><p>A npm version of laydate from <a href="http://www.layui.com/doc/modules/laydate.html" target="_blank" rel="noopener">laydate</a></p><h2 id="npm-命令"><a href="#npm-命令" class="headerlink" title="npm 命令:"></a>npm 命令:</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save laydate</span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"mydate"</span> <span class="attr">id</span>=<span class="string">"mydate"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> laydate = <span class="built_in">require</span>(<span class="string">"laydate"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//init date</span></span><br><span class="line">laydate(&#123;</span><br><span class="line">elem: <span class="string">'#mydate'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//reset </span></span><br><span class="line">laydate.reset();</span><br></pre></td></tr></table></figure><p>支持的选项    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     elem: <span class="string">'#id'</span>, <span class="comment">//需显示日期的元素选择器</span></span><br><span class="line">     event: <span class="string">'click'</span>, <span class="comment">//触发事件</span></span><br><span class="line">     format: <span class="string">'YYYY-MM-DD hh:mm:ss'</span>, <span class="comment">//日期格式</span></span><br><span class="line">     istime: <span class="literal">false</span>, <span class="comment">//是否开启时间选择</span></span><br><span class="line">     isclear: <span class="literal">true</span>, <span class="comment">//是否显示清空</span></span><br><span class="line">     istoday: <span class="literal">true</span>, <span class="comment">//是否显示今天</span></span><br><span class="line">     issure: <span class="literal">true</span>, 是否显示确认</span><br><span class="line">     festival: <span class="literal">true</span> <span class="comment">//是否显示节日</span></span><br><span class="line">     min: <span class="string">'1900-01-01 00:00:00'</span>, <span class="comment">//最小日期</span></span><br><span class="line">     max: <span class="string">'2099-12-31 23:59:59'</span>, <span class="comment">//最大日期</span></span><br><span class="line">     start: <span class="string">'2014-6-15 23:00:00'</span>,  <span class="comment">//开始日期</span></span><br><span class="line">     fixed: <span class="literal">false</span>, <span class="comment">//是否固定在可视区域</span></span><br><span class="line">     zIndex: <span class="number">99999999</span>, <span class="comment">//css z-index</span></span><br><span class="line">     choose: <span class="function"><span class="keyword">function</span>(<span class="params">dates</span>)</span>&#123; <span class="comment">//选择好日期的回调</span></span><br><span class="line">    </span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>更多查看  <a href="http://www.layui.com/doc/modules/layer.html" target="_blank" rel="noopener">http://www.layui.com/doc/modules/layer.html</a><br>dome查看 <a href="https://zbimbaloo.github.io/xiaocong/dome/laydate/test/test">https://zbimbaloo.github.io/xiaocong/dome/laydate/test/test</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的js插件库</title>
      <link href="/xiaocong/2019/03/06/Js/"/>
      <url>/xiaocong/2019/03/06/Js/</url>
      
        <content type="html"><![CDATA[<p>常见的js插件库</p><h2 id="MVC-框架和库"><a href="#MVC-框架和库" class="headerlink" title="MVC 框架和库"></a>MVC 框架和库</h2><p>•angular.js – 为网络应用增强 HTML。<br>•aurelia – 一个适用于移动设备、桌面电脑和 web 的客户端 JavaScript 框架。<br>•backbone – 给你的 JS 应用加入带有 Models、Views、Collections 和 Events 的 Backbone。<br>•batman.js – 最适合 Rails 开发者的 JavaScript 框架。<br>•ember.js – 一个旨在创建非凡 web 应用的 JavaScript 框架。<br>•meteor – 一个超简单的、数据库无处不在的、只传输数据的纯 JavaScript web 框架。<br>•ractive – 新一代 DOM 操作。<br>•vue – 一个用于构建可交互界面的、直观快速和可组合的 MVVM 框架。<br>•knockout – Knockout 用 JavaScript 让创建响应式的富 UI 更加容易。<br>•spine – 构建 JavaScript 应用的轻量 MVC 库。<br>•espresso.js – 一个极小的、用于制作用户界面的 JavaScript 库。<br>•canjs – 让 JS 更好、更快、更简单。<br>•react – 用于建构用户界面的库。它是声明式的、高效的和极度灵活的，并使用虚拟 DOM 作为其不同的实现。<br>•react-native – 一个用 React 构建原生应用的框架。<br>•riot – 类 React 库，但很轻量。<br>•thorax – 加强你的 Backbone。<br>•chaplin – 使用 Backbone.js 库的 JavaScript 应用架构。<br>•marionette – 一个 Backbone.js 的复合应用程序库，旨在简化大型 JavaScript 应用结构。<br>•ripple – 一个小巧的、用于构建响应界面的基础框架。<br>•rivets – 轻量却拥有强大的数据绑定和模板解决方案<br>•derby – 让编写实时和协同应用更简单的 MVC 框架，能够在 Node.js 和浏览器同时运行。 •derby-awesome – 很棒的 derby 组件集合。<br>•way.js – 简单、轻量、持久化的双向数据绑定。<br>•mithril.js – Mithril 是一个客户端 MVC 框架（轻量、强大和快速）<br>•jsblocks – jsblocks 是一个更好的 MV-ish 框架。<br>•LiquidLava – 易懂的、用于构建用户界面的 MVC 框架。</p><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p>•The JavaScript that you should know – 关于 JavaScript 函数化概念的文章。</p><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><h3 id="Web-数据可视化工具"><a href="#Web-数据可视化工具" class="headerlink" title="Web 数据可视化工具"></a>Web 数据可视化工具</h3><p>•d3 – 一个对 HTML 和 SVG 进行可视化的 JavaScript 库。<br>•metrics-graphics – 更简洁和拥有更规范的数据图表布局优化算法的库。<br>•pykcharts.js – 经过精心设计后，去除 d3.js 复杂性的 d3.js 图表库。<br>•three.js – JavaScript 3D 库。<br>•Chart.js – 简单的、基于 canvas 标签的 HTML5 图表库。<br>•paper.js – 是矢量图形脚本中的瑞士军刀 —— 使用 HTML5 Canvas 将 Scriptographer 移植到 JavaScript 和浏览器。<br>•fabric.js – JavaScript Canvas 库，SVG 与 Canvas 可以相互解析。<br>•peity – 进度条、线状和饼状图。<br>•raphael – JavaScript 矢量库。<br>•echarts – 商业产品图表。<br>•vis – 动态的、基于浏览器的可视化库。<br>•two.js – 一个渲染器无关的适用于 web 的二维绘图 api 。<br>•g.raphael – 基于 Rapha?l 图表库。<br>•sigma.js – 一个致力于图形绘画的 JavaScript 库。<br>•arbor – 一个使用 web workers 和 jQuery 的图形可视化库。<br>•cubism – 可视化时间序列的 D3 插件。<br>•dc.js – 与 crossfilter 无缝合作的多维图表绘制库，使用 d3.js 渲染。<br>•vega – 一套可视化语法。<br>•processing.js – Processing.js 基于 Web 标准使数据可视化，而无需任何插件。<br>•envisionjs – 动态的 HTML5 可视化。<br>•rickshaw – 用于构建交互式实时图表的 JavaScript 工具包。<br>•flot – 吸引人的、基于 jQuery 的 JavaScript 图表库。<br>•morris.js – 漂亮的时间序列线框图。<br>•nvd3 – 一个为 D3.js 构建可复用图表和图表组件的库。<br>•svg.js – 一个轻量的、用于操作和添加 SVG 动画的库。<br>•heatmap.js – 基于 HTML5 canvas 的热力图 JavaScript 库。<br>•jquery.sparkline – 一个直接在浏览器端生成小型走势图的 jQuery 插件。<br>•xCharts – 一个基于 D3、用于构建自定义图表和图形的库。<br>•trianglify – 基于 d3.js 的低多边形（low poly）风格背景图片生成器。<br>•d3-cloud – 创建词云（word cloud）效果的 JavaScript 库。<br>•d4 – 一个基于 D3 、友好、可复用的 DSL 图表库 。<br>•dimple.js – 基于 d3 的简易商业分析图表库。<br>•chartist-js – 简单的响应式图表。<br>•epoch – 一个通用的实时图表库。<br>•c3 – 基于 D3 的可复用图表库。<br>•BabylonJS – 一个运用 HTML5 和 WebGL 构建 3D 游戏的框架。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>•ClassManager – 世界上最快、最方便的类系统之一。<br>•klass – 用于创建极富表现力的类工具库。<br>•augment – 世界上最小且最快的一流 JavaScript 继承模式。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>•Parsley.js – 不用写一行 JavaScript 代码即可在前端验证表单。<br>•jquery-validation – jQuery 验证插件。<br>•validator.js – 字符串验证和过滤（在使用用户输入之前清理用户输入中的有害或危险字符的操作）。<br>•validate.js – 受 CodeIgniter 启发的轻量表单验证 JavaScript 库。<br>•validatr – 跨浏览器的 HTML5 表单验证库。<br>•BootstrapValidator – 是验证表单域中最好的 jQuery 插件。要与 Bootstrap 3 一起使用。<br>•is.js – 检查类型、正则表达式、是否存在、时间等。<br>•FieldVal – 多用途验证库。同时支持同步和异步验证。</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>•jQuery-File-Upload – File Upload 是一个支持多文件选择、文件拖放、进度条、验证和图片、音频、视频预览的 jQuery 插件。<br>•dropzone – Dropzone 是一个易于使用且支持多文件拖放的库。其支持图片预览并且拥有很好的进度条效果。<br>•flow.js – 一个通过 HTML5 的 File API ，提供多个同时链接的、稳定的、容错的、可恢复的/可重新开始的文件上传库。<br>•fine-uploader – 一个带有进度条、拖放功能和支持直接上传到 S3 （Amazon Simple Storage Service，亚马逊简易存储服务）的多文件上传插件。<br>•FileAPI – JavaScript 文件工具集合。支持多文件上传、拖放和文件分块上传。对于图像，支持裁剪、调整大小和根据 EXIF 自动调整方向。<br>•plupload – 处理文件上传的 JavaScript API，其支持多文件选择、文件类型过滤、分块请求、客户端图片缩放和根据不同的运行环境选择 HTML5、Silverlight 和 Flash。</p><h2 id="模态框和弹出框"><a href="#模态框和弹出框" class="headerlink" title="模态框和弹出框"></a>模态框和弹出框</h2><p>•Magnific-Popup – 专注于性能、轻量、响应式的灯箱（lightbox）脚本。<br>•jquery-popbox – jQuery 提示框插件。<br>•jquery.avgrund.js – 一种新的定于弹出的模态框 jQuery 插件。<br>•vex – 新的、拥有高度可配置和易于改变样式功能的对话框库。<br>•bootstrap-modal – 对 Bootstrap 默认的模态框类进行扩展。其支持响应式、可堆叠和 ajax 等。<br>•css-modal – 纯 CSS 打造的模态框。<br>•jquery-popup-overlay – 是一个响应式的和可访问性强的模态框和工具提示框（tooltips）jQuery 插件。</p><h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><p>•lena.js – 拥有滤镜和实用功能的图像处理库。<br>•pica – 高质量地调整图片大小（拥有快速的、纯 JS 实现的 Lanczos 滤镜算法）。<br>•cropper – 一个简单的图像裁剪 jQuery 插件。</p><h2 id="视频-音频"><a href="#视频-音频" class="headerlink" title="视频/音频"></a>视频/音频</h2><p>•prettyembed.js – 更完美地嵌入 YouTube —— 拥有很好的选项，如高分辨率的预览图、嵌入选项的高级定制和可选的 FitVids 支持。<br>•html5media – 能在所有主流浏览器播放多媒体标签中定义的多媒体文件。<a href="http://html5media.info/" target="_blank" rel="noopener">http://html5media.info/</a><br>•Play-em JS – Play’em 是一个 JavaScript 组件，它能管理音乐/视频播放顺序，通过在一个 DIV 元素里嵌入几个播放器（Youtube、Soundcloud 和 Vimeo）来控制一系列歌曲的播放。<br>•polyplayer – 将 YouTube、Soundcloud 和 Vimeo 播放器的 API 统一成一套。<br>•flowplayer – HTML5 视频播放器 <a href="http://flowplayer.org/" target="_blank" rel="noopener">http://flowplayer.org/</a><br>•mediaelement – 让 HTML5、 Flash 播放器和模仿 HTML5 媒介元素 API 的 Silverlight shim，在所有浏览器拥有一致的 UI。<a href="http://mediaelementjs.com/" target="_blank" rel="noopener">http://mediaelementjs.com/</a><br>•SoundJS – 让音频在 web 上运行更简单的库。它为不同浏览器提供了一致的 API。</p><h2 id="表格网格"><a href="#表格网格" class="headerlink" title="表格网格"></a>表格网格</h2><p>•jTable – 基于 CRUD 表创建 AJAX 的 jQuery 插件。<br>•DataTables – 这是一个非常灵活的工具，在渐进增强的基础上，将高级的交互效果加到 HTML 表格。（jQuery 插件）<br>•floatThead – （jQuery 插件）锁定表格头部，只允许表格内容滚动。适用于任何表格，而且不需要额外的 html 或 css。<br>•Masonry – 瀑布流式的网格布局库。<br>•Packery – 使用装箱算法（bin-packing）的网格布局库。支持拖拽布局。<br>•Isotope – 可过滤和可排序的网格布局的库，它能实现 Masonry、Packery 等布局。</p><h2 id="滚动"><a href="#滚动" class="headerlink" title="滚动"></a>滚动</h2><p>•scrollMonitor – 滚动发生时，可以监听元素的、简单、快速的 API。<br>•headroom – 除非你需要显示页面头部（header），否则将隐藏它，以腾出页面头部空间。<br>•onepage-scroll – 创建一个类似 Apple 的单页面滚动网站（iPhone 5S 网站）。<br>•iscroll – 高性能、轻量、无依赖、兼容多平台的 JavaScript 滚动组件。<br>•skrollr – 独立（不依赖 jQuery） 的视差滚动库，适用于移动设备（Android + iOS）和桌面电脑。<br>•parallax – 面向智能设备的视差引擎。<br>•stellar.js – 让视差滚动变简单。<br>•plax – 基于 jQuery 的视差库。<br>•jparallax – 创建可交互视差效果的 jQuery 插件。<br>•fullPage – 简单和易于使用的、用于创建全屏滚动网站的插件（也被称为单页面网站）。<br>•ScrollMenu – 让老旧无聊的滚动条焕然一新。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5.js让IE（包括IE6）支持HTML5元素方法</title>
      <link href="/xiaocong/2019/03/05/Html5Js/"/>
      <url>/xiaocong/2019/03/05/Html5Js/</url>
      
        <content type="html"><![CDATA[<p>html5.js让IE（包括IE6）支持HTML5元素方法</p><h2 id="1、引用Google的html5-js文件"><a href="#1、引用Google的html5-js文件" class="headerlink" title="1、引用Google的html5.js文件"></a>1、引用Google的html5.js文件</h2><textarea autocomplete="off" placeholder="请输入备注" style="height: 78px;">    <!--[if IE]>    <script src=”http://html5shiv.googlecode.com/svn/trunk/html5.js”></script>    < ![endif]--></textarea><p><b>将上代码复制到head部分，记住一定要是head部分</b>（因为IE必须在元素解析前知道这个元素，所以这个js文件不能在其他位置调用，否则失效）</p><p>当然，你也可以把代码拿出来自己看着办：html5.js</p><textarea autocomplete="off" placeholder="请输入备注" style="height: 1278px;">    /* HTML5 Shiv v3.6.2pre | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed Uncompressed source: https://github.com/aFarkas/html5shiv*/(function(l, f) {    function m() {        var a = e.elements;        return "string" == typeof a ? a.split(" ") : a    }<pre><code>function i(a) {    var b = n[a[o]];    b || (b = {}, h++, a[o] = h, n[h] = b);    return b}function p(a, b, c) {    b || (b = f);    if (g) return b.createElement(a);    c || (c = i(b));    b = c.cache[a] ? c.cache[a].cloneNode() : r.test(a) ? (c.cache[a] = c.createElem(a)).cloneNode() : c.createElem(a);    return b.canHaveChildren &amp;&amp; !s.test(a) ? c.frag.appendChild(b) : b}function t(a, b) {    if (!b.cache) b.cache = {}, b.createElem = a.createElement, b.createFrag = a.createDocumentFragment, b.frag = b.createFrag();    a.createElement = function(c) {        return !e.shivMethods ? b.createElem(c) : p(c, a, b)    };    a.createDocumentFragment = Function(&quot;h,f&quot;, &quot;return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&amp;&amp;(&quot; + m().join().replace(/\w+/g, function(a) {        b.createElem(a);        b.frag.createElement(a);        return &apos;c(&quot;&apos; + a + &apos;&quot;)&apos;    }) + &quot;);return n}&quot;)(e, b.frag)}function q(a) {    a || (a = f);    var b = i(a);    if (e.shivCSS &amp;&amp; !j &amp;&amp; !b.hasCSS) {        var c, d = a;        c = d.createElement(&quot;p&quot;);        d = d.getElementsByTagName(&quot;head&quot;)[0] || d.documentElement;        c.innerHTML = &quot;x&lt;style&gt;article,aside,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}&lt;/style&gt;&quot;;        c = d.insertBefore(c.lastChild, d.firstChild);        b.hasCSS = !! c    }    g || t(a, b);    return a}var k = l.html5 || {}, s = /^&lt;|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,    r = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,    j, o = &quot;_html5shiv&quot;,    h = 0,    n = {}, g;(function() {    try {        var a = f.createElement(&quot;a&quot;);        a.innerHTML = &quot;&lt;xyz&gt;&lt;/xyz&gt;&quot;;        j = &quot;hidden&quot; in a;        var b;        if (!(b = 1 == a.childNodes.length)) {            f.createElement(&quot;a&quot;);            var c = f.createDocumentFragment();            b = &quot;undefined&quot; == typeof c.cloneNode ||                &quot;undefined&quot; == typeof c.createDocumentFragment || &quot;undefined&quot; == typeof c.createElement        }        g = b    } catch (d) {        g = j = !0    }})();var e = {    elements: k.elements || &quot;abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup main mark meter nav output progress section summary time video&quot;,    version: &quot;3.6.2pre&quot;,    shivCSS: !1 !== k.shivCSS,    supportsUnknownElements: g,    shivMethods: !1 !== k.shivMethods,    type: &quot;default&quot;,    shivDocument: q,    createElement: p,    createDocumentFragment: function(a, b) {        a || (a = f);        if (g) return a.createDocumentFragment();        for (var b = b || i(a), c = b.frag.cloneNode(), d = 0, e = m(), h = e.length; d &lt; h; d++) c.createElement(e[d]);        return c    }};l.html5 = e;q(f)</code></pre><p>})(this, document);<br></p></textarea><p></p><h2 id="2、最后在css里面加上这段："><a href="#2、最后在css里面加上这段：" class="headerlink" title="2、最后在css里面加上这段："></a>2、最后在css里面加上这段：</h2><p>/<em>html5</em>/<br>article,aside,dialog,footer,header,section,footer,nav,figure,menu{display:block}</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>video.js的使用及问题</title>
      <link href="/xiaocong/2019/03/04/VideoJs/"/>
      <url>/xiaocong/2019/03/04/VideoJs/</url>
      
        <content type="html"><![CDATA[<p>最近的项目中需要播放视频，鉴于html5元素video的一些坑及不想自己造轮子，于是就找到了web端播放视频使用量最多的插件video.js，video.js是国外开发者开发的，英语本身就不好的我看英文文档简直是折磨，国内又没有中文文档，能搜的到的基本是简单的使用及最基本的api的介绍，想要实现一些自定义功能无从下手，所以我在这里整理一份我所遇到的问题及解决方法</p><h2 id="1、视频初始化"><a href="#1、视频初始化" class="headerlink" title="1、视频初始化"></a>1、视频初始化</h2><p>video.js有两种初始化方式，一种是在video的html标签之中，一种是使用js来进行初始化</p><h3 id="1-1、在video中进行初始化"><a href="#1-1、在video中进行初始化" class="headerlink" title="1.1、在video中进行初始化"></a>1.1、在video中进行初始化</h3><textarea autocomplete="off" placeholder="请输入备注" style="height: 278px;">    <video id="my-player" class="video-js" controls preload="auto" poster="//vjs.zencdn.net/v/oceans.png" width="600" height="400" data-setup="{}">  <source src="//vjs.zencdn.net/v/oceans.mp4" type="video/mp4">  <source src="//vjs.zencdn.net/v/oceans.webm" type="video/webm">  <source src="//vjs.zencdn.net/v/oceans.ogv" type="video/ogg">  <p class="vjs-no-js">    To view this video please enable JavaScript, and consider upgrading to a    web browser that    <a href="https://videojs.com/html5-video-support/" target="_blank">      supports HTML5 video    </a>  </p>  </video></textarea><p>效果</p><p><img src="/xiaocong/medias/banner/articlex.png" alt="效果图" title></p><h3 id="1-2、使用js进行初始化"><a href="#1-2、使用js进行初始化" class="headerlink" title="1.2、使用js进行初始化"></a>1.2、使用js进行初始化</h3><textarea autocomplete="off" placeholder="请输入备注" style="height: 278px;">    <!-- vjs-big-play-centered可使大的播放按钮居住，vjs-fluid可使视频占满容器 --><video id="myVideo" class="video-js vjs-big-play-centered vjs-fluid">  <p class="vjs-no-js">    To view this video please enable JavaScript, and consider upgrading to a    web browser that    <a href="https://videojs.com/html5-video-support/" target="_blank">      supports HTML5 video    </a>  </p></video><script>var player = videojs(document.getElementById('myVideo'), {  controls: true, // 是否显示控制条  poster: 'xxx', // 视频封面图地址  preload: 'auto',  autoplay: false,  fluid: true, // 自适应宽高  language: 'zh-CN', // 设置语言  muted: false, // 是否静音  inactivityTimeout: false,  controlBar: { // 设置控制条组件    /* 设置控制条里面组件的相关属性及显示与否    'currentTimeDisplay':true,    'timeDivider':true,    'durationDisplay':true,    'remainingTimeDisplay':false,    volumePanel: {      inline: false,    }    */    /* 使用children的形式可以控制每一个控件的位置，以及显示与否 */    children: [      {name: 'playToggle'}, // 播放按钮      {name: 'currentTimeDisplay'}, // 当前已播放时间      {name: 'progressControl'}, // 播放进度条      {name: 'durationDisplay'}, // 总时间      { // 倍数播放        name: 'playbackRateMenuButton',        'playbackRates': [0.5, 1, 1.5, 2, 2.5]      },      {        name: 'volumePanel', // 音量控制        inline: false, // 不使用水平方式      },      {name: 'FullscreenToggle'} // 全屏    ]  },  sources:[ // 视频源      {          src: '//vjs.zencdn.net/v/oceans.mp4',          type: 'video/mp4',          poster: '//vjs.zencdn.net/v/oceans.png'      }  ]}, function (){  console.log('视频可以播放了',this);});</script></textarea><h2 id="2、controlBar组件的说明"><a href="#2、controlBar组件的说明" class="headerlink" title="2、controlBar组件的说明"></a>2、controlBar组件的说明</h2><ul><li>playToggle, //播放暂停按钮</li><li>volumeMenuButton,//音量控制</li><li>currentTimeDisplay,//当前播放时间</li><li>timeDivider, // ‘/‘ 分隔符</li><li>durationDisplay, //总时间</li><li>progressControl, //点播流时，播放进度条，seek控制</li><li>liveDisplay, //直播流时，显示LIVE</li><li>remainingTimeDisplay, //当前播放时间</li><li>playbackRateMenuButton, //播放速率，当前只有html5模式下才支持设置播放速率</li><li>fullscreenToggle //全屏控制</li></ul><p>currentTimeDisplay,timeDivider,durationDisplay是相对于 remainingTimeDisplay的另一套组件，后者只显示当前播放时间，前者还显示总时间。若要显示成前者这种模式，即 ‘当前时间/总时间’，可以在初始化播放器选项中配置：</p><textarea autocomplete="off" placeholder="请输入备注" style="height: 178px;">    var myPlayer = neplayer('my-video', {controlBar:{    'currentTimeDisplay':true,    'timeDivider':true,    'durationDisplay':true,    'remainingTimeDisplay':false    }}, function() {         console.log('播放器初始化完成');    });</textarea><h2 id="3、video-js样式修改"><a href="#3、video-js样式修改" class="headerlink" title="3、video.js样式修改"></a>3、video.js样式修改</h2><textarea autocomplete="off" placeholder="请输入备注" style="height: 600px;">.video-js{ /* 给.video-js设置字体大小以统一各浏览器样式表现，因为video.js采用的是em单位 */  font-size: 14px;}.video-js button{  outline: none;}.video-js.vjs-fluid,.video-js.vjs-16-9,.video-js.vjs-4-3{ /* 视频占满容器高度 */  height: 100%;  background-color: #161616;}.vjs-poster{  background-color: #161616;}.video-js .vjs-big-play-button{ /* 中间大的播放按钮 */  font-size: 2.5em;  line-height: 2.3em;  height: 2.5em;  width: 2.5em;  -webkit-border-radius: 2.5em;  -moz-border-radius: 2.5em;  border-radius: 2.5em;  background-color: rgba(115,133,159,.5);  border-width: 0.12em;  margin-top: -1.25em;  margin-left: -1.75em;}.video-js.vjs-paused .vjs-big-play-button{ /* 视频暂停时显示播放按钮 */  display: block;}.video-js.vjs-error .vjs-big-play-button{ /* 视频加载出错时隐藏播放按钮 */  display: none;}.vjs-loading-spinner { /* 加载圆圈 */  font-size: 2.5em;  width: 2em;  height: 2em;  border-radius: 1em;  margin-top: -1em;  margin-left: -1.5em;}.video-js .vjs-control-bar{ /* 控制条默认显示 */  display: flex;}.video-js .vjs-time-control{display:block;}.video-js .vjs-remaining-time{display: none;}<p>.vjs-button &gt; .vjs-icon-placeholder:before{ /* 控制条所有图标，图标字体大小最好使用px单位，如果使用em，各浏览器表现可能会不大一样 <em>/<br>  font-size: 22px;<br>  line-height: 1.9;<br>}<br>.video-js .vjs-playback-rate .vjs-playback-rate-value{<br>  line-height: 2.4;<br>  font-size: 18px;<br>}<br>/</em> 进度条背景色 */<br>.video-js .vjs-play-progress{<br>  color: #ffb845;<br>  background-color: #ffb845;<br>}<br>.video-js .vjs-progress-control .vjs-mouse-display{<br>  background-color: #ffb845;<br>}<br>.vjs-mouse-display .vjs-time-tooltip{<br>  padding-bottom: 6px;<br>  background-color: #ffb845;<br>}<br>.video-js .vjs-play-progress .vjs-time-tooltip{<br>  display: none!important;<br>}<br></p></textarea><p></p><h2 id="4、动态切换视频"><a href="#4、动态切换视频" class="headerlink" title="4、动态切换视频"></a>4、动态切换视频</h2><textarea autocomplete="off" placeholder="请输入备注" style="height: 300px;"><script>  var data = {    src: 'xxx.mp4',    type: 'video/mp4'  };  var player = videojs('myVideo', {...});  player.pause();  player.src(data);  player.load(data);  // 动态切换poster  player.posterImage.setSrc('xxx.jpg');  player.play();<p>  // 销毁videojs<br>  //player.dispose();<br></script><br></textarea><p></p><h2 id="5、设置语言"><a href="#5、设置语言" class="headerlink" title="5、设置语言"></a>5、设置语言</h2><h3 id="5-1传统形式开发"><a href="#5-1传统形式开发" class="headerlink" title="5.1传统形式开发"></a>5.1传统形式开发</h3><p>对于使用script标签形式的方式引入video.js，只需要在页面中引入你需要的语言包即可</p><textarea autocomplete="off" placeholder="请输入备注" style="height: 300px;"><script src="//example.com/path/to/lang/es.js"></script><script src="//example.com/path/to/lang/zh-CN.js"></script><script src="//example.com/path/to/lang/zh-TW.js"></script><script>var player = videojs('myVideo', {    language: 'zh-CN' // 初始化时设置语言，立即生效});/* 动态切换语言  使用这种方式进行动态切换不会立即生效，必须有所操作后才会生效。如播放按钮，必须点击一次播放按钮后播放按钮的提示文字才会改变   *///player.language('zh-TW');</script></textarea><h3 id="5-2、vue开发"><a href="#5-2、vue开发" class="headerlink" title="5.2、vue开发"></a>5.2、vue开发</h3><textarea autocomplete="off" placeholder="请输入备注" style="height: 200px;">import Video from 'video.js'/* 不能直接引入js，否则会报错：videojs is not defined import 'video.js/dist/lang/zh-CN.js' */import video_zhCN from 'video.js/dist/lang/zh-CN.json'import video_en from  'video.js/dist/lang/en.json'import 'video.js/dist/video-js.css'Video.addLanguage('zh-CN', video_zhCN);Video.addLanguage('en', video_en);</textarea><h2 id="6、解决在iPhone中播放时自动全屏问题"><a href="#6、解决在iPhone中播放时自动全屏问题" class="headerlink" title="6、解决在iPhone中播放时自动全屏问题"></a>6、解决在iPhone中播放时自动全屏问题</h2><p>在iPhone设备上播放视频时(微信浏览器上也会有这个问题)会自动全屏，这里的全屏并不是常规的手机横屏那种全屏，而是类似于一个modal弹窗的全屏，解决办法就是在video标签中添加playsinline=”true”属性</p><textarea autocomplete="off" placeholder="请输入备注" style="height: 100px;"><video webkit-playsinline="true" playsinline="true" class="video-js vjs-big-play-centered vjs-fluid"></video></textarea><h2 id="7、参考文章"><a href="#7、参考文章" class="headerlink" title="7、参考文章"></a>7、参考文章</h2><ul><li><a href="http://vcloud.163.com/vcloud-sdk-manual/WebDemos/LivePlayer_Web/introToComponent.html" rel="nofollow noreferrer" target="_blank">视频云web播放器样式和组件自定义</a></li><li><a href="https://zhuanlan.zhihu.com/p/28338413" rel="nofollow noreferrer" target="_blank">Video.js 踩坑简单入门</a></li><li><a href="http://www.cnblogs.com/afrog/p/6689179.html" rel="nofollow noreferrer" target="_blank">免费视频播放器videojs中文教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora-vue-theme Theme introduction</title>
      <link href="/xiaocong/2018/09/07/hello-world/"/>
      <url>/xiaocong/2018/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo" title></p>### Create a new post<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><textarea autocomplete="off" placeholder="请输入备注" style="height: 100px;">    dome1:      icon: fas fa-file-alt      iconBackground: 'linear-gradient(to bottom right, #66BB6A 0%, #81C784 100%)'      url: https://github.com/ZBimbaloo/dome      desc: 一些小功能的dome    dome2:        icon: fas fa-database        iconBackground: 'linear-gradient(to bottom right, #F06292 0%, #EF5350 100%)'        url: https://github.com/ZBimbaloo/dome        desc: 一些小功能的dome    dome3:        icon: fas fa-file-alt        iconBackground: 'linear-gradient(to bottom right, #29B6F6 0%, #1E88E5 100%)'        url: https://github.com/ZBimbaloo/dome        desc: 一些小功能的dome</textarea>More info: [Writing](https://hexo.io/docs/writing.html)<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 介绍 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
