{"pages":[{"title":"jQuery图片延迟加载插件jQuery.lazyload","url":"/xiaocong/2019/03/10/Lazyload/","text":"插件描述：jQuery图片延迟加载插件jQuery.lazyload,使用延迟加载在可提高网页下载速度。在某些情况下，它也能帮助减轻服务器负载。 使用方法引用jquery和jquery.lazyload.js到你的页面 12&lt;script src=&quot;jquery-1.11.0.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;jquery.lazyload.js?v=1.9.1&quot;&gt;&lt;/script&gt; html图片调用方法 为图片加入样式lazy &nbsp;图片路径引用方法用data-original 123456&lt;img class=&quot;lazy&quot; data-original=&quot;img/bmw_m1_hood.jpg&quot;&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;img/bmw_m1_side.jpg&quot;&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;img/viper_1.jpg&quot;&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;img/viper_corner.jpg&quot;&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;img/bmw_m3_gt.jpg&quot;&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;img/corvette_pitstop.jpg&quot;&gt; js出始化lazyload并设置图片显示方式 12345&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt; $(function() &#123; $(&quot;img.lazy&quot;).lazyload(&#123;effect: &quot;fadeIn&quot;&#125;); &#125;);&lt;/script&gt; 在图片中也可以不使用 class=\"lazy\"，初始化时使用： 1$(&quot;img&quot;).lazyload(&#123;effect: &quot;fadeIn&quot;&#125;); 如果想提载入图片，可以使用 threshold 进行设置： 1$(&quot;img.lazy&quot;).lazyload(&#123; threshold :180&#125;); 以上实例的含义是：在图片距离屏幕180px时提前载入： 参数设置 1234567891011121314$(&quot;img.lazy&quot;).lazyload(&#123; placeholder : &quot;img/grey.gif&quot;, //用图片提前占位 // placeholder,值为某一图片路径.此图片用来占据将要加载的图片的位置,待图片加载时,占位图则会隐藏 effect: &quot;fadeIn&quot;, // 载入使用何种效果 // effect(特效),值有show(直接显示),fadeIn(淡入),slideDown(下拉)等,常用fadeIn threshold: 200, // 提前开始加载 // threshold,值为数字,代表页面高度.如设置为200,表示滚动条在离目标位置还有200的高度时就开始加载图片,可以做到不让用户察觉 event: &apos;click&apos;, // 事件触发时才加载 // event,值有click(点击),mouseover(鼠标划过),sporty(运动的),foobar(…).可以实现鼠标莫过或点击图片才开始加载,后两个值未测试… container: $(&quot;#container&quot;), // 对某容器中的图片实现效果 // container,值为某容器.lazyload默认在拉动浏览器滚动条时生效,这个参数可以让你在拉动某DIV的滚动条时依次加载其中的图片 failurelimit : 10 // 图片排序混乱时 // failurelimit,值为数字.lazyload默认在找到第一张不在可见区域里的图片时则不再继续加载,但当HTML容器混乱的时候可能出现可见区域内图片并没加载出来的情况,failurelimit意在加载N张可见区域外的图片,以避免出现这个问题.&#125;); dome查看 https://zbimbaloo.github.io/bimbaloo/dome/jquery.lazyLoad.js/lazyload.html","tags":"javascript"},{"title":"LAYDATE日历插件使用","url":"/xiaocong/2019/03/06/LaydateJs/","text":"LAYDATE日历插件使用 A npm version of laydate from laydate npm 命令:1npm i --save laydate 代码：1&lt;input name=\"mydate\" id=\"mydate\"&gt; 123456789var laydate = require(\"laydate\");//init datelaydate(&#123;elem: '#mydate'&#125;);//reset laydate.reset(); 支持的选项 123456789101112131415161718&#123; elem: '#id', //需显示日期的元素选择器 event: 'click', //触发事件 format: 'YYYY-MM-DD hh:mm:ss', //日期格式 istime: false, //是否开启时间选择 isclear: true, //是否显示清空 istoday: true, //是否显示今天 issure: true, 是否显示确认 festival: true //是否显示节日 min: '1900-01-01 00:00:00', //最小日期 max: '2099-12-31 23:59:59', //最大日期 start: '2014-6-15 23:00:00', //开始日期 fixed: false, //是否固定在可视区域 zIndex: 99999999, //css z-index choose: function(dates)&#123; //选择好日期的回调 &#125; &#125; 更多查看 http://www.layui.com/doc/modules/layer.htmldome查看 https://zbimbaloo.github.io/bimbaloo/dome/laydate/test/test.html","tags":"javascript html"},{"title":"常见的js插件库","url":"/xiaocong/2019/03/06/Js/","text":"常见的js插件库 MVC 框架和库•angular.js – 为网络应用增强 HTML。•aurelia – 一个适用于移动设备、桌面电脑和 web 的客户端 JavaScript 框架。•backbone – 给你的 JS 应用加入带有 Models、Views、Collections 和 Events 的 Backbone。•batman.js – 最适合 Rails 开发者的 JavaScript 框架。•ember.js – 一个旨在创建非凡 web 应用的 JavaScript 框架。•meteor – 一个超简单的、数据库无处不在的、只传输数据的纯 JavaScript web 框架。•ractive – 新一代 DOM 操作。•vue – 一个用于构建可交互界面的、直观快速和可组合的 MVVM 框架。•knockout – Knockout 用 JavaScript 让创建响应式的富 UI 更加容易。•spine – 构建 JavaScript 应用的轻量 MVC 库。•espresso.js – 一个极小的、用于制作用户界面的 JavaScript 库。•canjs – 让 JS 更好、更快、更简单。•react – 用于建构用户界面的库。它是声明式的、高效的和极度灵活的，并使用虚拟 DOM 作为其不同的实现。•react-native – 一个用 React 构建原生应用的框架。•riot – 类 React 库，但很轻量。•thorax – 加强你的 Backbone。•chaplin – 使用 Backbone.js 库的 JavaScript 应用架构。•marionette – 一个 Backbone.js 的复合应用程序库，旨在简化大型 JavaScript 应用结构。•ripple – 一个小巧的、用于构建响应界面的基础框架。•rivets – 轻量却拥有强大的数据绑定和模板解决方案•derby – 让编写实时和协同应用更简单的 MVC 框架，能够在 Node.js 和浏览器同时运行。 •derby-awesome – 很棒的 derby 组件集合。•way.js – 简单、轻量、持久化的双向数据绑定。•mithril.js – Mithril 是一个客户端 MVC 框架（轻量、强大和快速）•jsblocks – jsblocks 是一个更好的 MV-ish 框架。•LiquidLava – 易懂的、用于构建用户界面的 MVC 框架。 文章•The JavaScript that you should know – 关于 JavaScript 函数化概念的文章。 数据可视化Web 数据可视化工具•d3 – 一个对 HTML 和 SVG 进行可视化的 JavaScript 库。•metrics-graphics – 更简洁和拥有更规范的数据图表布局优化算法的库。•pykcharts.js – 经过精心设计后，去除 d3.js 复杂性的 d3.js 图表库。•three.js – JavaScript 3D 库。•Chart.js – 简单的、基于 canvas 标签的 HTML5 图表库。•paper.js – 是矢量图形脚本中的瑞士军刀 —— 使用 HTML5 Canvas 将 Scriptographer 移植到 JavaScript 和浏览器。•fabric.js – JavaScript Canvas 库，SVG 与 Canvas 可以相互解析。•peity – 进度条、线状和饼状图。•raphael – JavaScript 矢量库。•echarts – 商业产品图表。•vis – 动态的、基于浏览器的可视化库。•two.js – 一个渲染器无关的适用于 web 的二维绘图 api 。•g.raphael – 基于 Rapha?l 图表库。•sigma.js – 一个致力于图形绘画的 JavaScript 库。•arbor – 一个使用 web workers 和 jQuery 的图形可视化库。•cubism – 可视化时间序列的 D3 插件。•dc.js – 与 crossfilter 无缝合作的多维图表绘制库，使用 d3.js 渲染。•vega – 一套可视化语法。•processing.js – Processing.js 基于 Web 标准使数据可视化，而无需任何插件。•envisionjs – 动态的 HTML5 可视化。•rickshaw – 用于构建交互式实时图表的 JavaScript 工具包。•flot – 吸引人的、基于 jQuery 的 JavaScript 图表库。•morris.js – 漂亮的时间序列线框图。•nvd3 – 一个为 D3.js 构建可复用图表和图表组件的库。•svg.js – 一个轻量的、用于操作和添加 SVG 动画的库。•heatmap.js – 基于 HTML5 canvas 的热力图 JavaScript 库。•jquery.sparkline – 一个直接在浏览器端生成小型走势图的 jQuery 插件。•xCharts – 一个基于 D3、用于构建自定义图表和图形的库。•trianglify – 基于 d3.js 的低多边形（low poly）风格背景图片生成器。•d3-cloud – 创建词云（word cloud）效果的 JavaScript 库。•d4 – 一个基于 D3 、友好、可复用的 DSL 图表库 。•dimple.js – 基于 d3 的简易商业分析图表库。•chartist-js – 简单的响应式图表。•epoch – 一个通用的实时图表库。•c3 – 基于 D3 的可复用图表库。•BabylonJS – 一个运用 HTML5 和 WebGL 构建 3D 游戏的框架。 类•ClassManager – 世界上最快、最方便的类系统之一。•klass – 用于创建极富表现力的类工具库。•augment – 世界上最小且最快的一流 JavaScript 继承模式。 验证•Parsley.js – 不用写一行 JavaScript 代码即可在前端验证表单。•jquery-validation – jQuery 验证插件。•validator.js – 字符串验证和过滤（在使用用户输入之前清理用户输入中的有害或危险字符的操作）。•validate.js – 受 CodeIgniter 启发的轻量表单验证 JavaScript 库。•validatr – 跨浏览器的 HTML5 表单验证库。•BootstrapValidator – 是验证表单域中最好的 jQuery 插件。要与 Bootstrap 3 一起使用。•is.js – 检查类型、正则表达式、是否存在、时间等。•FieldVal – 多用途验证库。同时支持同步和异步验证。 文件上传•jQuery-File-Upload – File Upload 是一个支持多文件选择、文件拖放、进度条、验证和图片、音频、视频预览的 jQuery 插件。•dropzone – Dropzone 是一个易于使用且支持多文件拖放的库。其支持图片预览并且拥有很好的进度条效果。•flow.js – 一个通过 HTML5 的 File API ，提供多个同时链接的、稳定的、容错的、可恢复的/可重新开始的文件上传库。•fine-uploader – 一个带有进度条、拖放功能和支持直接上传到 S3 （Amazon Simple Storage Service，亚马逊简易存储服务）的多文件上传插件。•FileAPI – JavaScript 文件工具集合。支持多文件上传、拖放和文件分块上传。对于图像，支持裁剪、调整大小和根据 EXIF 自动调整方向。•plupload – 处理文件上传的 JavaScript API，其支持多文件选择、文件类型过滤、分块请求、客户端图片缩放和根据不同的运行环境选择 HTML5、Silverlight 和 Flash。 模态框和弹出框•Magnific-Popup – 专注于性能、轻量、响应式的灯箱（lightbox）脚本。•jquery-popbox – jQuery 提示框插件。•jquery.avgrund.js – 一种新的定于弹出的模态框 jQuery 插件。•vex – 新的、拥有高度可配置和易于改变样式功能的对话框库。•bootstrap-modal – 对 Bootstrap 默认的模态框类进行扩展。其支持响应式、可堆叠和 ajax 等。•css-modal – 纯 CSS 打造的模态框。•jquery-popup-overlay – 是一个响应式的和可访问性强的模态框和工具提示框（tooltips）jQuery 插件。 图像处理•lena.js – 拥有滤镜和实用功能的图像处理库。•pica – 高质量地调整图片大小（拥有快速的、纯 JS 实现的 Lanczos 滤镜算法）。•cropper – 一个简单的图像裁剪 jQuery 插件。 视频/音频•prettyembed.js – 更完美地嵌入 YouTube —— 拥有很好的选项，如高分辨率的预览图、嵌入选项的高级定制和可选的 FitVids 支持。•html5media – 能在所有主流浏览器播放多媒体标签中定义的多媒体文件。http://html5media.info/•Play-em JS – Play’em 是一个 JavaScript 组件，它能管理音乐/视频播放顺序，通过在一个 DIV 元素里嵌入几个播放器（Youtube、Soundcloud 和 Vimeo）来控制一系列歌曲的播放。•polyplayer – 将 YouTube、Soundcloud 和 Vimeo 播放器的 API 统一成一套。•flowplayer – HTML5 视频播放器 http://flowplayer.org/•mediaelement – 让 HTML5、 Flash 播放器和模仿 HTML5 媒介元素 API 的 Silverlight shim，在所有浏览器拥有一致的 UI。http://mediaelementjs.com/•SoundJS – 让音频在 web 上运行更简单的库。它为不同浏览器提供了一致的 API。 表格网格•jTable – 基于 CRUD 表创建 AJAX 的 jQuery 插件。•DataTables – 这是一个非常灵活的工具，在渐进增强的基础上，将高级的交互效果加到 HTML 表格。（jQuery 插件）•floatThead – （jQuery 插件）锁定表格头部，只允许表格内容滚动。适用于任何表格，而且不需要额外的 html 或 css。•Masonry – 瀑布流式的网格布局库。•Packery – 使用装箱算法（bin-packing）的网格布局库。支持拖拽布局。•Isotope – 可过滤和可排序的网格布局的库，它能实现 Masonry、Packery 等布局。 滚动•scrollMonitor – 滚动发生时，可以监听元素的、简单、快速的 API。•headroom – 除非你需要显示页面头部（header），否则将隐藏它，以腾出页面头部空间。•onepage-scroll – 创建一个类似 Apple 的单页面滚动网站（iPhone 5S 网站）。•iscroll – 高性能、轻量、无依赖、兼容多平台的 JavaScript 滚动组件。•skrollr – 独立（不依赖 jQuery） 的视差滚动库，适用于移动设备（Android + iOS）和桌面电脑。•parallax – 面向智能设备的视差引擎。•stellar.js – 让视差滚动变简单。•plax – 基于 jQuery 的视差库。•jparallax – 创建可交互视差效果的 jQuery 插件。•fullPage – 简单和易于使用的、用于创建全屏滚动网站的插件（也被称为单页面网站）。•ScrollMenu – 让老旧无聊的滚动条焕然一新。","tags":"javascript"},{"title":"html5.js让IE（包括IE6）支持HTML5元素方法","url":"/xiaocong/2019/03/05/Html5Js/","text":"html5.js让IE（包括IE6）支持HTML5元素方法 1、引用Google的html5.js文件123&lt;!--[if IE]&gt;&lt;script src=”http://html5shiv.googlecode.com/svn/trunk/html5.js”&gt;&lt;/script&gt;&lt; ![endif]--&gt; 将上代码复制到head部分，记住一定要是head部分（因为IE必须在元素解析前知道这个元素，所以这个js文件不能在其他位置调用，否则失效） 当然，你也可以把代码拿出来自己看着办：html5.js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091 /* HTML5 Shiv v3.6.2pre | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed Uncompressed source: https://github.com/aFarkas/html5shiv*/(function(l, f) &#123; function m() &#123; var a = e.elements; return &quot;string&quot; == typeof a ? a.split(&quot; &quot;) : a &#125; function i(a) &#123; var b = n[a[o]]; b || (b = &#123;&#125;, h++, a[o] = h, n[h] = b); return b &#125; function p(a, b, c) &#123; b || (b = f); if (g) return b.createElement(a); c || (c = i(b)); b = c.cache[a] ? c.cache[a].cloneNode() : r.test(a) ? (c.cache[a] = c.createElem(a)).cloneNode() : c.createElem(a); return b.canHaveChildren &amp;&amp; !s.test(a) ? c.frag.appendChild(b) : b &#125; function t(a, b) &#123; if (!b.cache) b.cache = &#123;&#125;, b.createElem = a.createElement, b.createFrag = a.createDocumentFragment, b.frag = b.createFrag(); a.createElement = function(c) &#123; return !e.shivMethods ? b.createElem(c) : p(c, a, b) &#125;; a.createDocumentFragment = Function(&quot;h,f&quot;, &quot;return function()&#123;var n=f.cloneNode(),c=n.createElement;h.shivMethods&amp;&amp;(&quot; + m().join().replace(/\\w+/g, function(a) &#123; b.createElem(a); b.frag.createElement(a); return &apos;c(&quot;&apos; + a + &apos;&quot;)&apos; &#125;) + &quot;);return n&#125;&quot;)(e, b.frag) &#125; function q(a) &#123; a || (a = f); var b = i(a); if (e.shivCSS &amp;&amp; !j &amp;&amp; !b.hasCSS) &#123; var c, d = a; c = d.createElement(&quot;p&quot;); d = d.getElementsByTagName(&quot;head&quot;)[0] || d.documentElement; c.innerHTML = &quot;x&lt;style&gt;article,aside,figcaption,figure,footer,header,hgroup,main,nav,section&#123;display:block&#125;mark&#123;background:#FF0;color:#000&#125;&lt;/style&gt;&quot;; c = d.insertBefore(c.lastChild, d.firstChild); b.hasCSS = !! c &#125; g || t(a, b); return a &#125; var k = l.html5 || &#123;&#125;, s = /^&lt;|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i, r = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i, j, o = &quot;_html5shiv&quot;, h = 0, n = &#123;&#125;, g; (function() &#123; try &#123; var a = f.createElement(&quot;a&quot;); a.innerHTML = &quot;&lt;xyz&gt;&lt;/xyz&gt;&quot;; j = &quot;hidden&quot; in a; var b; if (!(b = 1 == a.childNodes.length)) &#123; f.createElement(&quot;a&quot;); var c = f.createDocumentFragment(); b = &quot;undefined&quot; == typeof c.cloneNode || &quot;undefined&quot; == typeof c.createDocumentFragment || &quot;undefined&quot; == typeof c.createElement &#125; g = b &#125; catch (d) &#123; g = j = !0 &#125; &#125;)(); var e = &#123; elements: k.elements || &quot;abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup main mark meter nav output progress section summary time video&quot;, version: &quot;3.6.2pre&quot;, shivCSS: !1 !== k.shivCSS, supportsUnknownElements: g, shivMethods: !1 !== k.shivMethods, type: &quot;default&quot;, shivDocument: q, createElement: p, createDocumentFragment: function(a, b) &#123; a || (a = f); if (g) return a.createDocumentFragment(); for (var b = b || i(a), c = b.frag.cloneNode(), d = 0, e = m(), h = e.length; d &lt; h; d++) c.createElement(e[d]); return c &#125; &#125;; l.html5 = e; q(f)&#125;)(this, document); 2、最后在css里面加上这段：/html5/article,aside,dialog,footer,header,section,footer,nav,figure,menu{display:block}","tags":"javascript html"},{"title":"video.js的使用及问题","url":"/xiaocong/2019/03/04/VideoJs/","text":"最近的项目中需要播放视频，鉴于html5元素video的一些坑及不想自己造轮子，于是就找到了web端播放视频使用量最多的插件video.js，video.js是国外开发者开发的，英语本身就不好的我看英文文档简直是折磨，国内又没有中文文档，能搜的到的基本是简单的使用及最基本的api的介绍，想要实现一些自定义功能无从下手，所以我在这里整理一份我所遇到的问题及解决方法 1、视频初始化video.js有两种初始化方式，一种是在video的html标签之中，一种是使用js来进行初始化 1.1、在video中进行初始化1234567891011121314151617181920 &lt;video id=&quot;my-player&quot; class=&quot;video-js&quot; controls preload=&quot;auto&quot; poster=&quot;//vjs.zencdn.net/v/oceans.png&quot; width=&quot;600&quot; height=&quot;400&quot; data-setup=&apos;&#123;&#125;&apos;&gt;&lt;source src=&quot;//vjs.zencdn.net/v/oceans.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/source&gt;&lt;source src=&quot;//vjs.zencdn.net/v/oceans.webm&quot; type=&quot;video/webm&quot;&gt;&lt;/source&gt;&lt;source src=&quot;//vjs.zencdn.net/v/oceans.ogv&quot; type=&quot;video/ogg&quot;&gt;&lt;/source&gt;&lt;p class=&quot;vjs-no-js&quot;&gt; To view this video please enable JavaScript, and consider upgrading to a web browser that &lt;a href=&quot;https://videojs.com/html5-video-support/&quot; target=&quot;_blank&quot;&gt; supports HTML5 video &lt;/a&gt;&lt;/p&gt;&lt;/video&gt; 效果 1.2、使用js进行初始化1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859 &lt;!-- vjs-big-play-centered可使大的播放按钮居住，vjs-fluid可使视频占满容器 --&gt;&lt;video id=&quot;myVideo&quot; class=&quot;video-js vjs-big-play-centered vjs-fluid&quot;&gt; &lt;p class=&quot;vjs-no-js&quot;&gt; To view this video please enable JavaScript, and consider upgrading to a web browser that &lt;a href=&quot;https://videojs.com/html5-video-support/&quot; target=&quot;_blank&quot;&gt; supports HTML5 video &lt;/a&gt; &lt;/p&gt;&lt;/video&gt;&lt;script&gt;var player = videojs(document.getElementById(&apos;myVideo&apos;), &#123; controls: true, // 是否显示控制条 poster: &apos;xxx&apos;, // 视频封面图地址 preload: &apos;auto&apos;, autoplay: false, fluid: true, // 自适应宽高 language: &apos;zh-CN&apos;, // 设置语言 muted: false, // 是否静音 inactivityTimeout: false, controlBar: &#123; // 设置控制条组件 /* 设置控制条里面组件的相关属性及显示与否 &apos;currentTimeDisplay&apos;:true, &apos;timeDivider&apos;:true, &apos;durationDisplay&apos;:true, &apos;remainingTimeDisplay&apos;:false, volumePanel: &#123; inline: false, &#125; */ /* 使用children的形式可以控制每一个控件的位置，以及显示与否 */ children: [ &#123;name: &apos;playToggle&apos;&#125;, // 播放按钮 &#123;name: &apos;currentTimeDisplay&apos;&#125;, // 当前已播放时间 &#123;name: &apos;progressControl&apos;&#125;, // 播放进度条 &#123;name: &apos;durationDisplay&apos;&#125;, // 总时间 &#123; // 倍数播放 name: &apos;playbackRateMenuButton&apos;, &apos;playbackRates&apos;: [0.5, 1, 1.5, 2, 2.5] &#125;, &#123; name: &apos;volumePanel&apos;, // 音量控制 inline: false, // 不使用水平方式 &#125;, &#123;name: &apos;FullscreenToggle&apos;&#125; // 全屏 ] &#125;, sources:[ // 视频源 &#123; src: &apos;//vjs.zencdn.net/v/oceans.mp4&apos;, type: &apos;video/mp4&apos;, poster: &apos;//vjs.zencdn.net/v/oceans.png&apos; &#125; ]&#125;, function ()&#123; console.log(&apos;视频可以播放了&apos;,this);&#125;);&lt;/script&gt; 2、controlBar组件的说明 playToggle, //播放暂停按钮 volumeMenuButton,//音量控制 currentTimeDisplay,//当前播放时间 timeDivider, // ‘/‘ 分隔符 durationDisplay, //总时间 progressControl, //点播流时，播放进度条，seek控制 liveDisplay, //直播流时，显示LIVE remainingTimeDisplay, //当前播放时间 playbackRateMenuButton, //播放速率，当前只有html5模式下才支持设置播放速率 fullscreenToggle //全屏控制 currentTimeDisplay,timeDivider,durationDisplay是相对于 remainingTimeDisplay的另一套组件，后者只显示当前播放时间，前者还显示总时间。若要显示成前者这种模式，即 ‘当前时间/总时间’，可以在初始化播放器选项中配置： 12345678var myPlayer = neplayer(&apos;my-video&apos;, &#123;controlBar:&#123;&apos;currentTimeDisplay&apos;:true,&apos;timeDivider&apos;:true,&apos;durationDisplay&apos;:true,&apos;remainingTimeDisplay&apos;:false&#125;&#125;, function() &#123; console.log(&apos;播放器初始化完成&apos;);&#125;); 3、video.js样式修改1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071.video-js&#123; /* 给.video-js设置字体大小以统一各浏览器样式表现，因为video.js采用的是em单位 */ font-size: 14px;&#125;.video-js button&#123; outline: none;&#125;.video-js.vjs-fluid,.video-js.vjs-16-9,.video-js.vjs-4-3&#123; /* 视频占满容器高度 */ height: 100%; background-color: #161616;&#125;.vjs-poster&#123; background-color: #161616;&#125;.video-js .vjs-big-play-button&#123; /* 中间大的播放按钮 */ font-size: 2.5em; line-height: 2.3em; height: 2.5em; width: 2.5em; -webkit-border-radius: 2.5em; -moz-border-radius: 2.5em; border-radius: 2.5em; background-color: rgba(115,133,159,.5); border-width: 0.12em; margin-top: -1.25em; margin-left: -1.75em;&#125;.video-js.vjs-paused .vjs-big-play-button&#123; /* 视频暂停时显示播放按钮 */ display: block;&#125;.video-js.vjs-error .vjs-big-play-button&#123; /* 视频加载出错时隐藏播放按钮 */ display: none;&#125;.vjs-loading-spinner &#123; /* 加载圆圈 */ font-size: 2.5em; width: 2em; height: 2em; border-radius: 1em; margin-top: -1em; margin-left: -1.5em;&#125;.video-js .vjs-control-bar&#123; /* 控制条默认显示 */ display: flex;&#125;.video-js .vjs-time-control&#123;display:block;&#125;.video-js .vjs-remaining-time&#123;display: none;&#125;.vjs-button &gt; .vjs-icon-placeholder:before&#123; /* 控制条所有图标，图标字体大小最好使用px单位，如果使用em，各浏览器表现可能会不大一样 */ font-size: 22px; line-height: 1.9;&#125;.video-js .vjs-playback-rate .vjs-playback-rate-value&#123; line-height: 2.4; font-size: 18px;&#125;/* 进度条背景色 */.video-js .vjs-play-progress&#123; color: #ffb845; background-color: #ffb845;&#125;.video-js .vjs-progress-control .vjs-mouse-display&#123; background-color: #ffb845;&#125;.vjs-mouse-display .vjs-time-tooltip&#123; padding-bottom: 6px; background-color: #ffb845;&#125;.video-js .vjs-play-progress .vjs-time-tooltip&#123; display: none!important;&#125; 4、动态切换视频12345678910111213141516&lt;script&gt; var data = &#123; src: &apos;xxx.mp4&apos;, type: &apos;video/mp4&apos; &#125;; var player = videojs(&apos;myVideo&apos;, &#123;...&#125;); player.pause(); player.src(data); player.load(data); // 动态切换poster player.posterImage.setSrc(&apos;xxx.jpg&apos;); player.play(); // 销毁videojs //player.dispose();&lt;/script&gt; 5、设置语言5.1传统形式开发对于使用script标签形式的方式引入video.js，只需要在页面中引入你需要的语言包即可 1234567891011121314&lt;script src=&quot;//example.com/path/to/lang/es.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;//example.com/path/to/lang/zh-CN.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;//example.com/path/to/lang/zh-TW.js&quot;&gt;&lt;/script&gt;&lt;script&gt;var player = videojs(&apos;myVideo&apos;, &#123; language: &apos;zh-CN&apos; // 初始化时设置语言，立即生效&#125;);/* 动态切换语言 使用这种方式进行动态切换不会立即生效，必须有所操作后才会生效。如播放按钮，必须点击一次播放按钮后播放按钮的提示文字才会改变 *///player.language(&apos;zh-TW&apos;);&lt;/script&gt; 5.2、vue开发12345678import Video from &apos;video.js&apos;/* 不能直接引入js，否则会报错：videojs is not defined import &apos;video.js/dist/lang/zh-CN.js&apos; */import video_zhCN from &apos;video.js/dist/lang/zh-CN.json&apos;import video_en from &apos;video.js/dist/lang/en.json&apos;import &apos;video.js/dist/video-js.css&apos;Video.addLanguage(&apos;zh-CN&apos;, video_zhCN);Video.addLanguage(&apos;en&apos;, video_en); 6、解决在iPhone中播放时自动全屏问题在iPhone设备上播放视频时(微信浏览器上也会有这个问题)会自动全屏，这里的全屏并不是常规的手机横屏那种全屏，而是类似于一个modal弹窗的全屏，解决办法就是在video标签中添加playsinline=”true”属性 12345&lt;video webkit-playsinline=&quot;true&quot; playsinline=&quot;true&quot; class=&quot;video-js vjs-big-play-centered vjs-fluid&quot;&gt;&lt;/video&gt; 7、参考文章 视频云web播放器样式和组件自定义 Video.js 踩坑简单入门 免费视频播放器videojs中文教程","tags":"javascript vue"},{"title":"typora-vue-theme Theme introduction","url":"/xiaocong/2018/09/07/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start ### Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":"介绍 前端"},{"title":"tags","url":"/xiaocong/tags/index.html","text":"","tags":""},{"title":"分类","url":"/xiaocong/categories/index.html","text":"","tags":""},{"title":"about","url":"/xiaocong/about/index.html","text":"","tags":""}]}