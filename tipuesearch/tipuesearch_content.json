{"pages":[{"title":"AOS一个独特的页面滚动动画库","url":"/xiaocong/2019/03/14/AosJs/","text":"简要教程aos.js是一款效果超赞的页面滚动元素动画jQuery动画库插件。该动画库可以在页面滚动时提供28种不同的元素动画效果，以及多种easing效果。在页面往回滚动时，元素会恢复到原来的状态。 使用方法在页面中引入aos.css文件,jquery和aos.js文件 123&lt;link rel=&quot;stylesheet&quot; href=&quot;dist/aos.css&quot; /&gt;&lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;dist/aos.js&quot;&gt;&lt;/script&gt; 要使用aos动画库，你需要做的就是在需要动画的元素上添加aos属性，例如： 1&lt;div aos=&quot;animation_name&quot;&gt; aos脚本将会在页面滚动时，在该元素上触发相应的动画。 在元素上还可以添加以下一些属性： 属性 属性 属性 默认值 aos-offset 是立刻触发动画还是在指定时间之后触发动画 200 120 aos-duration 动画持续时间 600 400 aos-easing 动画的easing动画效果 ease-in-sine ease aos-delay 动画的延迟时间 300 0 aos-anchor 锚元素。使用它的偏移来取代实际元素的偏移来触发动画 #selector null aos-anchor-placement 锚位置，触发动画时元素位于屏幕的位置 top-center top-bottom aos-once 动画是否只会触发一次，或者每次上下滚动都会触发 true false 注意，aos-duration的动画持续时间的范围从50-3000毫秒，如果你想设置更大的值，可以在页面中添加下面的CSS代码： 123body[aos-duration=&apos;4000&apos;] [aos], [aos][aos][aos-duration=&apos;4000&apos;]&#123; transition-duration: 4000ms;&#125; 上面的代码将动画的持续时间修改为4000毫秒。 示例代码1234567&lt;div class=&quot;aos-item&quot; data-aos=&quot;fade-up&quot;&gt; &lt;div class=&quot;aos-item&quot; data-aos=&quot;fade-down&quot;&gt; &lt;div class=&quot;aos-item__inner&quot;&gt;&lt;h3&gt;2&lt;/h3&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;aos-item&quot; data-aos=&quot;zoom-out-down&quot;&gt; &lt;div class=&quot;aos-item__inner&quot;&gt;&lt;h3&gt;3&lt;/h3&gt;&lt;/div&gt; &lt;/div&gt; 如果你担心HTML5校验的问题，可以为上面的属性添加data-前缀。 全局配置：如果不想单独每个元素做一个动画配置，你可以通过init()方法来统一配置所有元素的动画效果 123456AOS.init(&#123; offset: 200, duration: 600, easing: &apos;ease-in-sine&apos;, delay: 100,&#125;); 额外配置AOS提供了2个额外的配置方法，这些方法只能够在初始化时使用。 配置 描述 示例值 默认值 disable AOS被禁用的条件 mobile false startEvent AOS被初始化的事件名称 exampleEvent DOMContentLoaded 禁用AOS：如果你项在小屏幕设备中禁用AOS，可以： 123AOS.init(&#123; disable: &apos;mobile&apos;&#125;); 你可以传入3种设备的类型：mobile、phone或tablet。 你也可以设置自己的禁用条件，例如在屏幕小于1024像素时禁用AOS： 1disable: window.innerWidth &lt; 1024 或者传入一个函数，返回true或false。 1234disable: function () &#123; var maxWidth = 1024; return window.innerWidth &lt; maxWidth;&#125; 开始动画的事件：如果你不想滚动动画从页面加载（DOMContentLoaded）后就开始执行，可以使用startEvent来设置自己的事件，AOS会在document上监听这个事件： 123AOS.init(&#123; startEvent: &apos;someCoolEvent&apos;&#125;); APIAOS对象有2个可用的方法： initrefresh 1AOS.refresh(); 上面的代码会重新计算元素的位置和偏移。 动画和锚位置动画 淡入淡出动画： fade-upfade-downfade-leftfade-rightfade-up-rightfade-up-leftfade-down-rightfade-down-left翻转动画： flip-upflip-downflip-leftflip-right滑动动画： slide-upslide-downslide-leftslide-right缩放动画： zoom-inzoom-in-upzoom-in-downzoom-in-leftzoom-in-rightzoom-outzoom-out-upzoom-out-downzoom-out-leftzoom-out-right锚位置 top-bottomtop-centertop-topcenter-bottomcenter-centercenter-topbottom-bottombottom-centerbottom-topeasing动画 你可以使用以下的一些easing动画效果： lineareaseease-inease-outease-in-outease-in-backease-out-backease-in-out-backease-in-sineease-out-sineease-in-out-sineease-in-quadease-out-quadease-in-out-quadease-in-cubicease-out-cubicease-in-out-cubicease-in-quartease-out-quartease-in-out-quart dome查看 https://zbimbaloo.github.io/bimbaloo/dome/jquery.lazyLoad.js/lazyload.html","tags":"javascript"},{"title":"chart.js一个生成图表的js插件","url":"/xiaocong/2019/03/12/ChartJs/","text":"创建图表要创建图表，我们需要实例化Chart该类。为此，我们需要传入要绘制图表的画布的节点，jQuery实例或2d上下文。这是一个例子。 123456&lt;canvas id=&quot;myChart&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;// Any of the following formats may be usedvar ctx = document.getElementById(&apos;myChart&apos;);var ctx = document.getElementById(&apos;myChart&apos;).getContext(&apos;2d&apos;);var ctx = $(&apos;#myChart&apos;);var ctx = &apos;myChart&apos;; 有了元素或上下文后，就可以实例化预定义的图表类型或创建自己的图表类型了！ 以下示例实例化了一个条形图，该条形图显示了不同颜色的投票数，y轴从0开始。 12345678910111213141516171819202122232425262728293031323334353637383940&lt;canvas id=&quot;myChart&quot; width=&quot;400&quot; height=&quot;400&quot;&gt;&lt;/canvas&gt;&lt;script&gt;var ctx = document.getElementById(&apos;myChart&apos;);var myChart = new Chart(ctx, &#123; type: &apos;bar&apos;, data: &#123; labels: [&apos;Red&apos;, &apos;Blue&apos;, &apos;Yellow&apos;, &apos;Green&apos;, &apos;Purple&apos;, &apos;Orange&apos;], datasets: [&#123; label: &apos;# of Votes&apos;, data: [12, 19, 3, 5, 2, 3], backgroundColor: [ &apos;rgba(255, 99, 132, 0.2)&apos;, &apos;rgba(54, 162, 235, 0.2)&apos;, &apos;rgba(255, 206, 86, 0.2)&apos;, &apos;rgba(75, 192, 192, 0.2)&apos;, &apos;rgba(153, 102, 255, 0.2)&apos;, &apos;rgba(255, 159, 64, 0.2)&apos; ], borderColor: [ &apos;rgba(255, 99, 132, 1)&apos;, &apos;rgba(54, 162, 235, 1)&apos;, &apos;rgba(255, 206, 86, 1)&apos;, &apos;rgba(75, 192, 192, 1)&apos;, &apos;rgba(153, 102, 255, 1)&apos;, &apos;rgba(255, 159, 64, 1)&apos; ], borderWidth: 1 &#125;] &#125;, options: &#123; scales: &#123; yAxes: [&#123; ticks: &#123; beginAtZero: true &#125; &#125;] &#125; &#125;&#125;);&lt;/script&gt; 图表条形图 12345var myBarChart = new Chart(ctx, &#123; type: &apos;bar&apos;, data: data, options: options&#125;); 折线图 12345var myLineChart = new Chart(ctx, &#123; type: &apos;line&apos;, data: data, options: options&#125;); 雷达图 12345var myRadarChart = new Chart(ctx, &#123; type: &apos;radar&apos;, data: data, options: options&#125;); 极地面积图 12345new Chart(ctx, &#123; data: data, type: &apos;polarArea&apos;, options: options&#125;); 饼图 12345var myDoughnutChart = new Chart(ctx, &#123; type: &apos;doughnut&apos;, data: data, options: options&#125;); 甜甜圈图 12345var myPieChart = new Chart(ctx, &#123; type: &apos;pie&apos;, data: data, options: options&#125;); 参数/数据矩形图 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485 var data = &#123; labels: [&quot;January&quot;, &quot;February&quot;, &quot;March&quot;, &quot;April&quot;, &quot;May&quot;, &quot;June&quot;, &quot;July&quot;], datasets: [&#123; // 当前图表数据的标题内容 label: &quot;第一条数据&quot;, // 是否填充折线与水平轴中间的区域 fill: true, // 设置折线数据点的贝塞尔曲线值（值为0时为折线） lineTension: 0.1, // 设置背景颜色 backgroundColor: &quot;rgba(75,192,192,0.4)&quot;, // 设置边框颜色 borderColor: &quot;rgba(75,192,192,1)&quot;, // 设置折线端点的样式 borderCapStyle: &apos;butt&apos;, // 破折号的长度和间距 borderDash: [], // 破折号的偏移量 borderDashOffset: 0.0, // 设置折线交点的样式 borderJoinStyle: &apos;miter&apos;, // 设置折线数据点的边框颜色 pointBorderColor: &quot;rgba(75,192,192,1)&quot;, // 设置折线数据点的背景颜色 pointBackgroundColor: &quot;#fff&quot;, // 设置折线数据点的边框宽度 pointBorderWidth: 1, // 设置当鼠标悬停折线数据点时的半径 pointHoverRadius: 5, // 设置当鼠标悬停折线数据点时的背景颜色 pointHoverBackgroundColor: &quot;rgba(75,192,192,1)&quot;, // 设置当鼠标悬停折线数据点时的边框颜色 pointHoverBorderColor: &quot;rgba(220,220,220,1)&quot;, // 设置当鼠标悬停折线数据点时的边框宽度 pointHoverBorderWidth: 2, // 设置折线数据点的半径 pointRadius: 1, // pointHitRadius: 10, // 设置折线中所有的数据 data: [65, 59, 80, 81, 56, 55, 40], // 如果设置为true，将在没有数据或空数据的点之间绘制直线 &#125;, &#123; label: &quot;第二条数据&quot;, // 是否填充折线与水平轴中间的区域 fill: true, // 设置折线数据点的贝塞尔曲线值（值为0时为折线） lineTension: 0.1, // 设置背景颜色 backgroundColor: &quot;rgba(175,192,192,0.4)&quot;, // 设置边框颜色 borderColor: &quot;rgba(175,192,192,1)&quot;, // 设置折线端点的样式 borderCapStyle: &apos;butt&apos;, // 破折号的长度和间距 borderDash: [], // 破折号的偏移量 borderDashOffset: 0.0, // 设置折线交点的样式 borderJoinStyle: &apos;miter&apos;, // 设置折线数据点的边框颜色 pointBorderColor: &quot;rgba(175,192,192,1)&quot;, // 设置折线数据点的背景颜色 pointBackgroundColor: &quot;#fff&quot;, // 设置折线数据点的边框宽度 pointBorderWidth: 1, // 设置当鼠标悬停折线数据点时的半径 pointHoverRadius: 5, // 设置当鼠标悬停折线数据点时的背景颜色 pointHoverBackgroundColor: &quot;rgba(75,192,192,1)&quot;, // 设置当鼠标悬停折线数据点时的边框颜色 pointHoverBorderColor: &quot;rgba(220,220,220,1)&quot;, // 设置当鼠标悬停折线数据点时的边框宽度 pointHoverBorderWidth: 2, // 设置折线数据点的半径 pointRadius: 1, // pointHitRadius: 10, // 设置折线中所有的数据 data: [28, 48, 40, 19, 86, 27, 90] &#125; ]&#125;; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546 var options = &#123; //轴 scales: &#123; xAxes: [&#123; &#125;], yAxes: [&#123; ticks: &#123; beginAtZero: true &#125;, gridLines: &#123; color: &apos;#FFF&apos; &#125; &#125;] &#125;, //标题 title: &#123; display: true, text: &apos;Custom Chart Title&apos; &#125;, //配置 legend: &#123; display: true, labels: &#123; fontColor: &apos;rgb(255, 99, 132)&apos; &#125; &#125;, //动画 animation: &#123; duration: 1000 &#125;, //提示 tooptips: &#123; enable: true, backgroundColor: &apos;#ff0&apos; &#125;， //布局 layout: &#123; padding: &#123; left: 50, right: 0, top: 0, bottom: 0 &#125; &#125;&#125;; 圆形图 123456789101112131415161718192021222324 var data = &#123; datasets: [&#123; data: [28, 48, 40, 119, 86, 27, 90], backgroundColor: [ &apos;#00f&apos;, &apos;#0f0&apos;, &apos;#f00&apos;, &apos;#ff0&apos;, &apos;#0ff&apos;, &apos;#f0f&apos;, &apos;#d33&apos;, ] &#125;], // These labels appear in the legend and in the tooltips when hovering different arcs labels: [ &apos;Red&apos;, &apos;Yellow&apos;, &apos;Blue&apos;, &apos;Redq&apos;, &apos;Yellows&apos;, &apos;Blues&apos;, &apos;Blued&apos; ]&#125;; 1234567 var options= &#123; scale: &#123; gridLines: &#123; color: &apos;#FFF&apos;, &#125; &#125;&#125; 参考文档文档１https://segmentfault.com/a/1190000008498664文档2：https://www.chartjs.org/docs/latest/文档3：http://chartjs.cn/docs/#line-chart-introduction 列子dome查看 https://zbimbaloo.github.io/bimbaloo/dome/H5/index.html","tags":"javascript"},{"title":"jQuery图片延迟加载插件jQuery.lazyload","url":"/xiaocong/2019/03/10/Lazyload/","text":"插件描述：jQuery图片延迟加载插件jQuery.lazyload,使用延迟加载在可提高网页下载速度。在某些情况下，它也能帮助减轻服务器负载。 使用方法引用jquery和jquery.lazyload.js到你的页面 12&lt;script src=&quot;jquery-1.11.0.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;jquery.lazyload.js?v=1.9.1&quot;&gt;&lt;/script&gt; html图片调用方法 为图片加入样式lazy &nbsp;图片路径引用方法用data-original 123456&lt;img class=&quot;lazy&quot; data-original=&quot;img/bmw_m1_hood.jpg&quot;&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;img/bmw_m1_side.jpg&quot;&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;img/viper_1.jpg&quot;&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;img/viper_corner.jpg&quot;&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;img/bmw_m3_gt.jpg&quot;&gt;&lt;img class=&quot;lazy&quot; data-original=&quot;img/corvette_pitstop.jpg&quot;&gt; js出始化lazyload并设置图片显示方式 12345&lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt; $(function() &#123; $(&quot;img.lazy&quot;).lazyload(&#123;effect: &quot;fadeIn&quot;&#125;); &#125;);&lt;/script&gt; 在图片中也可以不使用 class=\"lazy\"，初始化时使用： 1$(&quot;img&quot;).lazyload(&#123;effect: &quot;fadeIn&quot;&#125;); 如果想提载入图片，可以使用 threshold 进行设置： 1$(&quot;img.lazy&quot;).lazyload(&#123; threshold :180&#125;); 以上实例的含义是：在图片距离屏幕180px时提前载入： 参数设置 1234567891011121314$(&quot;img.lazy&quot;).lazyload(&#123; placeholder : &quot;img/grey.gif&quot;, //用图片提前占位 // placeholder,值为某一图片路径.此图片用来占据将要加载的图片的位置,待图片加载时,占位图则会隐藏 effect: &quot;fadeIn&quot;, // 载入使用何种效果 // effect(特效),值有show(直接显示),fadeIn(淡入),slideDown(下拉)等,常用fadeIn threshold: 200, // 提前开始加载 // threshold,值为数字,代表页面高度.如设置为200,表示滚动条在离目标位置还有200的高度时就开始加载图片,可以做到不让用户察觉 event: &apos;click&apos;, // 事件触发时才加载 // event,值有click(点击),mouseover(鼠标划过),sporty(运动的),foobar(…).可以实现鼠标莫过或点击图片才开始加载,后两个值未测试… container: $(&quot;#container&quot;), // 对某容器中的图片实现效果 // container,值为某容器.lazyload默认在拉动浏览器滚动条时生效,这个参数可以让你在拉动某DIV的滚动条时依次加载其中的图片 failurelimit : 10 // 图片排序混乱时 // failurelimit,值为数字.lazyload默认在找到第一张不在可见区域里的图片时则不再继续加载,但当HTML容器混乱的时候可能出现可见区域内图片并没加载出来的情况,failurelimit意在加载N张可见区域外的图片,以避免出现这个问题.&#125;); dome查看 https://zbimbaloo.github.io/bimbaloo/dome/jquery.lazyLoad.js/lazyload.html","tags":"javascript"},{"title":"LAYDATE日历插件使用","url":"/xiaocong/2019/03/06/LaydateJs/","text":"LAYDATE日历插件使用 A npm version of laydate from laydate npm 命令:1npm i --save laydate 代码：1&lt;input name=\"mydate\" id=\"mydate\"&gt; 123456789var laydate = require(\"laydate\");//init datelaydate(&#123;elem: '#mydate'&#125;);//reset laydate.reset(); 支持的选项 123456789101112131415161718&#123; elem: '#id', //需显示日期的元素选择器 event: 'click', //触发事件 format: 'YYYY-MM-DD hh:mm:ss', //日期格式 istime: false, //是否开启时间选择 isclear: true, //是否显示清空 istoday: true, //是否显示今天 issure: true, 是否显示确认 festival: true //是否显示节日 min: '1900-01-01 00:00:00', //最小日期 max: '2099-12-31 23:59:59', //最大日期 start: '2014-6-15 23:00:00', //开始日期 fixed: false, //是否固定在可视区域 zIndex: 99999999, //css z-index choose: function(dates)&#123; //选择好日期的回调 &#125; &#125; 更多查看 http://www.layui.com/doc/modules/layer.htmldome查看 https://zbimbaloo.github.io/bimbaloo/dome/laydate/test/test.html","tags":"javascript html"},{"title":"常见的js插件库2","url":"/xiaocong/2019/03/06/Jsk/","text":"常见的js插件库 包管理器管理着 JavaScript 库，并提供读取和打包它们的工具。 npm：npm 是 JavaScript 的包管理器。Bower：一个 web 应用的包管理器。component：能构建更好 web 应用的客户端包管理器。spm：全新的静态包管理器。jam：一个专注于浏览器端和兼容 RequireJS 的包管理器。jspm：流畅的浏览器包管理器。Ender：没有库文件的程序库。volo：以项目模板、添加依赖项与自动化生成的方式创建前端项目。Duo：一个整合 Component、Browserify 和 Go 的最佳思想，使开发者能快速方便地组织和编写前端代码的下一代包管理器。 加载器JavaScript 的模块或加载系统。 RequireJS：JavaScript 文件和模块的加载器。browserify：在浏览器端以 node.js 的方式 require()。SeaJS：用于 Web 的模块加载器。HeadJS：HEAD 的唯一脚本。curl：小巧、快速且易扩展的模块加载器，它能处理 AMD、CommonJS Modules/1.1、CSS、HTML/text 和历史脚本。lazyload：小巧且无依赖的异步 JavaScript 和 CSS 加载器。script.js：异步 JavaScript 加载器和依赖管理器。systemjs：AMD、CJS（commonJS） 和符合 ES6 规范的模块加载器。LodJS：基于 AMD 的模块加载器。ESL：浏览器端的模块加载器，支持延迟定义和 AMD。modulejs：轻量的 JavaScript 模块系统。 打包工具browserify ：Browserify 让你能在浏览器端使用 require(‘modules’) ，打包所有依赖。webpack：为浏览器打包 CommonJs/AMD 模块。gulp：用自动化构建工具增强你的工作流程！rollup: JavaScript 模块打包器! 中文 测试框架框架mocha：适用于 node.js 和浏览器、简易、灵活、有趣的 JavaScript 测试框架。jasmine：简单无 DOM 的 JavaScript 测试框架。qunit：一个易于使用的 JavaScript 单元测试框架。jest：简单的 JavaScript 单元测试框架。prova：基于 Tape 和 Browserify 的测试运行器，它适用于 Node &amp; 浏览器。DalekJS：自动化且跨浏览器的 JavaScript 功能测试框架。 断言chai：适用于 node.js 和浏览器的 BDD / TDD 断言框架，并能搭配其它测试框架使用。Sinon.JS：对 JavaScript 进行 spies、stubs 和 mock 测试。expect.js：简约的、适用于 Node.js 和浏览器端的 BDD 式断言工具。should.js：适用于 Node.js 的 BDD 式断言工具。 覆盖率istanbul：另一个 JS 代码覆盖率检测工具。blanket：一个简单的代码覆盖率检测库。它的设计理念是易于安装和使用，且可用于浏览器端和 node.js。JSCover：JSCover 是一个检测 JavaScript 程序代码覆盖率的工具。 运行器phantomjs：脚本化的 Headless WebKit。slimerjs：一个内核为 Gecko 的类似 PhantomJS 工具。casperjs：基于 PhantomJS 和 Slimer JS 的导航脚本和测试工具。zombie：基于 node.js 、快速、全栈且无图形界面的浏览器的测试工具。totoro：一个简单可靠且能跨浏览器运行的测试工具。karma：一个优秀的的 JavaScript 测试运行器。nightwatch：基于 node.js 和 selenium webdriver 的图形界面自动化测试框架。intern：下一代 JavaScript 代码测试栈。yolpo：在浏览器逐句执行的 JavaScript 解释器。 QA 工具JSHint：JSHint 是一个有助于发现 JavaScript 代码错误和潜在问题的工具。jscs：JavaScript 代码风格检测工具。jsfmt：格式化、搜索和改写 JavaScript。jsinspect：检测复制粘贴和结构类似的代码。buddy.js：发现 JavaScript 代码里的 魔术数字。ESLint：完全插件化的工具，能在 JavaScript 中识别和记录模式。JSLint ：高标准、严格和固执的代码质量工具，旨在只保持语言的优良部分。 MVC 框架和库angular.js：为网络应用增强 HTML。aurelia：一个适用于移动设备、桌面电脑和 web 的客户端 JavaScript 框架。backbone：给你的 JS 应用加入带有 Models、Views、Collections 和 Events 的 Backbone。batman.js：最适合 Rails 开发者的 JavaScript 框架。ember.js：一个旨在创建非凡 web 应用的 JavaScript 框架。meteor：一个超简单的、数据库无处不在的、只传输数据的纯 JavaScript web 框架。ractive：新一代 DOM 操作。vue：一个用于构建可交互界面的、直观快速和可组合的 MVVM 框架。knockout：Knockout 用 JavaScript 让创建响应式的富 UI 更加容易。spine：构建 JavaScript 应用的轻量 MVC 库。espresso.js：一个极小的、用于制作用户界面的 JavaScript 库。canjs：让 JS 更好、更快、更简单。react：用于建构用户界面的库。它是声明式的、高效的和极度灵活的，并使用虚拟 DOM 作为其不同的实现。react-native：一个用 React 构建原生应用的框架。riot：类 React 库，但很轻量。thorax：加强你的 Backbone。chaplin：使用 Backbone.js 库的 JavaScript 应用架构。marionette：一个 Backbone.js 的复合应用程序库，旨在简化大型 JavaScript 应用结构。ripple：一个小巧的、用于构建响应界面的基础框架。rivets：轻量却拥有强大的数据绑定和模板解决方案derby：让编写实时和协同应用更简单的 MVC 框架，能够在 Node.js 和浏览器同时运行。derby-awesome：很棒的 derby 组件集合。way.js：简单、轻量、持久化的双向数据绑定。mithril.js：Mithril 是一个客户端 MVC 框架（轻量、强大和快速）jsblocks：jsblocks 是一个更好的 MV-ish 框架。LiquidLava：易懂的、用于构建用户界面的 MVC 框架。Electron：用Html、CSS和JavaScript构建跨平台的客户端应用程序。、GitHub基于 Node 的 CMS 框架KeystoneJS：强大的 CMS 和 web 应用框架。Reaction Commerce：拥有实时的架构和设计的响应式（reactive） CMS。Ghost：简单、强大的发布平台。Apostrophe：提供内容编辑和基本服务的 CMS。We.js：适用于实时应用、网站或博客的框架。Hatch.js：拥有社交特性的 CMS 平台。TaracotJS：拥有快速、极简风格特点且基于Node.js 的 CMS。Nodizecms：为 CoffeeScript 爱好者准备的 CMS。Cody：拥有所见即所得的编辑器的 CMS。PencilBlue：CMS 和博客平台。 模板引擎模板引擎允许您执行字符串插值。mustache.js：是 JavaScript 中带有 的最简模板。handlebars.js：是 Mustache 模板语言的扩展。hogan.js：是 Mustache 模板语言的编译器。doT：最快速简洁的 JavaScript 模板引擎，适用于 nodejs 和浏览器。dustjs：适用于浏览器和 node.js 的异步模板。eco：嵌入式的 CoffeeScript 模板。JavaScript-Templates：轻量（小于 1KB）、快速且无依赖的强大 JavaScript 模版引擎。t.js：小巧的 JavaScript 模板框架，压缩后约为 400 字节。pug：健壮的、优雅且功能丰富的 nodejs 模板引擎。EJS：高效的 JavaScript 模板。xtemplate：可扩展的模板引擎，适用于 node 和浏览器。marko：快速轻量且基于 HTML 的模板引擎，支持异步、流、自定义标签和 CommonJS 模编译后输出。适用于 Node.js 和浏览器。FluxFlux是Facebook用来构建客户端Web应用的应用架构 Reflux是根据React的flux创建的单向数据流类库。Redux是可预测javascript应用程序状态的容器。Mobx是通过透明的函数响应式编程实现简单，可扩展的状态管理库。Dva是基于Redux, Redux-saga 和 react-router@2.x的轻量级的框架。 数据可视化数据可视化工具d3：一个对 HTML 和 SVG 进行可视化的 JavaScript 库。metrics-graphics：更简洁和拥有更规范的数据图表布局优化算法的库。pykcharts.js：经过精心设计后，去除 d3.js 复杂性的 d3.js 图表库。three.js：JavaScript 3D 库。Chart.js：简单的、基于 canvas 标签的 HTML5 图表库。paper.js：是矢量图形脚本中的瑞士军刀 —— 使用 HTML5 Canvas 将 Scriptographer 移植到 JavaScript 和浏览器。fabric.js：JavaScript Canvas 库，SVG 与 Canvas 可以相互解析。peity：进度条、线状和饼状图。raphael：JavaScript 矢量库。echarts：商业产品图表。vis：动态的、基于浏览器的可视化库。two.js：一个渲染器无关的适用于 web 的二维绘图 api 。g.raphael：基于 Raphaël 图表库。sigma.js：一个致力于图形绘画的 JavaScript 库。arbor：一个使用 web workers 和 jQuery 的图形可视化库。cubism：可视化时间序列的 D3 插件。dc.js：与 crossfilter 无缝合作的多维图表绘制库，使用 d3.js 渲染。vega：一套可视化语法。processing.js：Processing.js 基于 Web 标准使数据可视化，而无需任何插件。envisionjs：动态的 HTML5 可视化。rickshaw：用于构建交互式实时图表的 JavaScript 工具包。flot：吸引人的、基于 jQuery 的 JavaScript 图表库。morris.js：漂亮的时间序列线框图。nvd3：一个为 D3.js 构建可复用图表和图表组件的库。svg.js：一个轻量的、用于操作和添加 SVG 动画的库。heatmap.js：基于 HTML5 canvas 的热力图 JavaScript 库。jquery.sparkline：一个直接在浏览器端生成小型走势图的 jQuery 插件。xCharts：一个基于 D3、用于构建自定义图表和图形的库。trianglify：基于 d3.js 的低多边形（low poly）风格背景图片生成器。d3-cloud：创建词云（word cloud）效果的 JavaScript 库。d4：一个基于 D3 、友好、可复用的 DSL 图表库 。dimple.js：基于 d3 的简易商业分析图表库。chartist-js：简单的响应式图表。epoch：一个通用的实时图表库。c3：基于 D3 的可复用图表库。BabylonJS：一个运用 HTML5 和 WebGL 构建 3D 游戏的框架。jquery.raty.js：一个星级评分插件。也有一些很棒的收费库，如 amchart、plotly 和 highchart。 时间轴TimelineJS： 一个用 JavaScript 编写的可叙事时间轴库。timesheet.js：用于构建简单的 HTML5 &amp; CSS3 时间表的 JavaScript 库。 编辑器ace：Ace（Ajax.org Cloud9 Editor）。CodeMirror：浏览器端的代码编辑器。esprima：用于综合分析的 ECMAScript 解析器。quill：一个带有 API 的跨浏览器富文本编辑器。()medium-editor：Medium.com 所见即所得编辑器的克隆版。pen：享受在线编辑（支持 markdown）。jquery-notebook：一个易用的、简洁优雅的文本编辑器。灵感来源于 Medium 的魅力。bootstrap-wysiwyg：小巧的、兼容 bootstrap 的所见即所得的富文本编辑器。ckeditor-releases：适用于每个人的 web 文本编辑器。editor：一个 markdown 编辑器，但仍在开发中。EpicEditor：一个可嵌入的 JavaScript Markdown 的编辑器，拥有全屏编辑、即时预览、自动保存草稿和离线支持等功能。jsoneditor：查看、编辑和格式化 JSON 的 web 工具。vim.js： 拥有持久化 ~/.vimrc 的 Vim 编辑器的 JavaScript 移植版本。Squire：HTML5 富文本编辑器。TinyMCE：JavaScript 富文本编辑器。trix：由 Basecamp 制作，适用于每天写作的富文本编辑器。 文件处理文件的库。Papa Parse：一款强大的 CSV 库，支持解析 CSV 文件/字符串，也能导出 CSV。jBinary：对用声明式语法描述文件类型和数据结构的二进制文件，进行高级 I/O（加载、解析、操作、序列化、存储）操作。 函数式编程函数式编程库扩展了 JavaScript 的能力。underscore：JavaScript 的实用工具。lodash：提供一致性、可定制、高性能和额外功能的实用库。Sugar：一个扩展了原生对象功能的 JavaScript 库。lazy.js：类似 Underscore，但性能更优越ramda：一个针对 JavaScript 程序员的实用函数库。mout：模块化的 JavaScript 工具库。mesh：流数据同步工具。 响应式编程响应式程序库扩展了 JavaScript 的能力。RxJs：对 JavaScript 进行响应式扩展。Bacon：JavaScript 的 FPR（函数式响应式编程）库。Kefir：受 Bacon.js 和 RxJS 启发的 FRP 库，专注于高性能和低内存消耗。Highland：对 JavaScript 实用工具的重新思考，Highland 能轻易地管理同步和异步信息，而且仅使用标准 JavaScript 和类 Node 流。Most.js：高性能 FRP 库。 数据结构数据结构库用于构建一个更复杂的应用。immutable-js：不可变的数据集合，包括 Sequence、Range、Repeat、Map、OrderedMap、Set 和 sparse Vector。mori：使用 ClojureScript 持久化数据结构和支持原生 JavaScript API 的库。buckets：完整的、经过充分测试和记录数据结构的 JavaScript 库。hashmap：简单的 hashmap 实现，支持任何类型的键值。 日期日期库。moment：解析、验证、操作和显示日期。moment-timezone：基于 moment.js 的时区库。jquery-timeago：一款支持自动更新模糊时间戳的 jQuery 插件（如：”4 分钟之前”）。timezone-js：让 JavaScript Date 对象拥有时区功能。使用 Olson zoneinfo 文件记录着时区数据。date：拥有人性化的 Date() 方法。ms.js：小巧的毫秒转换工具。timeago.js：一个非常轻量级(~1.7 Kb)的用于将时间转化成xxx时间前格式，例如：8分钟前。 字符串字符串库。selecting：一个允许你获取用户选定文本的库。underscore.string：扩展了 Underscore.js 的字符串操作。string.js：额外的 JavaScript 字符串方法。he：健壮的 HTML 实体编码/解码器。multiline：多行字符串。query-string：解析和字符串化 URL 查询字符串。URI.js：URL 操作库。jsurl：轻量的 URL 操作库。sprintf.js：实现字符串格式化。url-pattern：让 url 和其它字符串进行比正则表达式匹配更简单。字符串和数据可相互转化。 数字Numeral-js：对数字进行格式化和操作的库。odometer：流畅的数字过渡效果。accounting.js：对数字、金钱、货币进行格式化的轻量库——完全本地化和无依赖。money.js：一个小巧（1kb）的货币转换库，适用于 web 和 nodeJS。Fraction.js：一个有理数库。Complex.js： 一个复数库。Polynomial.js：一个多项式库。 存储store.js：为所有浏览器封装了 LocalStorage，而没有使用 cookies 和 flash。隐秘地使用 localStorage、globalStorage 和用户数据。localForage：改善后的离线存储。其封装了 IndexedDB、WebSQL 和 localStorage，拥有操作简单和强大的 API。jStorage：jStorage 是一个简单的键值对数据库，用于在浏览器端存储数据。cross-storage：获得权限后，能跨域名本地存储。basket.js：用 localStorage 加载和缓存脚本的资源加载器。bag.js：可以缓存脚本和加载资源，与 basket.js 相似，但增加了键值对接口和对 localStorage / websql / undexedDB 的支持。basil.js：智能的 JavaScript 数据持久层库。jquery-cookie：轻量简单的、用于读取、编辑和删除 cookie 的 jQuery 插件。Cookies：客户端 Cookie 操作库。DB.js：基于 Promise 的、封装了 IndexedDB 的库。lawnchair.js：简单的客户端 JSON 存储。 颜色randomColor：JavaScript 颜色生成器。chroma.js：拥有各种各样颜色操作的 JavaScript 库。color：JavaScript 颜色转换和操作库。colors：更智能的默认 web 颜色。PleaseJS：随机创建出赏心悦目的颜色和配色方案。TinyColor：快速、轻巧的颜色操作和转换库。Vibrant.js：从图像提取主要颜色。 国际化和本地化（I18n And L10n）本地化和国际化 JavaScript 库i18next：JavaScript 最简单的国际化（i18n）方法。polyglot：小巧的国际化助手库。babelfish：i18n 提供友好易懂的 API ，并且内置多种支持。 类ClassManager：世界上最快、最方便的类系统之一。klass：用于创建极富表现力的类工具库。augment：世界上最小且最快的一流 JavaScript 继承模式。 控制流async：适用于 node 和浏览器的异步工具库。q：实现异步的 promise JavaScript 库。step：让逻辑顺序合理化的异步控制流库。contra：利用函数风格实现的异步流控制。Bluebird：专注于革新功能和性能的，功能齐全的 promoise 库。when：快速可靠的、Promises/A+ 规范的 when() 实现，而且拥有异步其它的优秀特性。ObjectEventTarget：提供增加了事件监听的原型（与 DOMElement 的 EventTarget 在浏览器行为一致）。 路由director：一个小巧的、与 URL 同构的路由器。page.js：受 Express router 启发的小型客户端路由器（约为1200字节）。pathjs：简单、轻量的 web 路由器。crossroads：JavaScript 路由。davis.js：使用 pushState、RESTful 风格和可降级的 JavaScript 路由器。angular-ui-router：基于AngularJS的可嵌套路由。react-router: Declarative routing for React 官方vue-router: Declarative routing for Vue 官方 安全性DOMPurify：针对 HTML、MathML 和 SVG 的仅支持DOM、快速、高容错的 XSS 过滤器。js-xss：通过白名单配置，即可过滤不信任的 HTML（防止 XSS 攻击）。 日志log：带有样式的 Console.log。Conzole：对 JavaScript 原生 console 对象方法和功能进行封装的 debug 面板，使其显示在页面内。console.log-wrapper：将日志清晰地记录到 console，且兼容所有浏览器。loglevel：最轻量的 JavaScript 日志记录工具库，向封装后可用的 console.log 方法增加可靠的日志等级。minilog：轻量的、用流式 API 显示的、可用于客户端和服务器端的日志记录库。 正则表达式RegEx101：在线的 JavaScript 正则表达式测试器和调试器。同时支持 Python、PHP 和 PCRE。RegExr：用于创建、测试和学习正则表达式的 HTML/JS 工具。RegExpBuilder：使用链式方法创建正则表达式。 媒体Ion.Sound：可用于任何网页上简单音频。 语音命令annyang：向网站添加语音命令的语音识别库。voix.js：向网站、app 或游戏添加语音命令的 JavaScript 库。 APIbottleneck：强大的频率限制器，使调节流量变得更容易。oauth-signature-js：适用于 node 和 浏览器的 OAuth 1.0a 签名生成器。amygdala：为 Web 应用提供 RESTful HTTP 客户端解决方案。jquery.rest：一个让 RESTful API 更易使用的 jQuery 插件。 视觉检测tracking.js：在 web 上实现计算视觉的一种现代方法。ocrad.js：通过 Emscripten 用 JavaScript 实现 OCR（光学字符识别）。 浏览器检测bowser：一个浏览器检测器。 性能分析easy-monitor：一个轻量级实时 Node.js 项目的内核性能分析工具。 UI代码高亮Highlight.js：JavaScript 语法高亮器。PrismJS：轻量、健壮和优雅的语法高亮器。 加载状态指示加载状态的库。Mprogress.js：创建谷歌 Material 设计风格的线性进度条。NProgress：在 Ajax y 应用显示细长型进度条Spin.js：一个旋转的进度指示器。progress.js：为页面任何对象创建和管理进度条。progressbar.js：用 SVG path 动画制作的、漂亮和响应式的进度条。pace：自动向你的网站添加一个进度条。topbar：小巧漂亮的、与网站同宽的进度指示器。nanobar：非常轻量的进度条。不依赖 jQuery。PageLoadingEffects：使用 SVG 动画展现新内容的现代方式。SpinKit：运用 CSS 动画的加载指示器集合。Ladda：内置在按钮的加载指示器。css-loaders：运用 CSS 动画的旋转加载指示器的集合。除了上述这些库，还有收藏在 Codepen 的，另外还有 Ajaxload，Preloaders 和 CSSLoad 这些生成器。 验证Parsley.js：不用写一行 JavaScript 代码即可在前端验证表单。jquery-validation：jQuery 验证插件。validator.js：字符串验证和过滤（在使用用户输入之前清理用户输入中的有害或危险字符的操作）。validate.js：受 CodeIgniter 启发的轻量表单验证 JavaScript 库。validatr：跨浏览器的 HTML5 表单验证库。BootstrapValidator：是验证表单域中最好的 jQuery 插件。要与 Bootstrap 3 一起使用。is.js：检查类型、正则表达式、是否存在、时间等。FieldVal：多用途验证库。同时支持同步和异步验证。 键盘封装器mousetrap：处理键盘快捷键的 JavaScript 库。keymaster：定义和调度键盘快捷键的小型库。Keypress：键入捕捉工具库，任何键都可以成为一个修饰健。KeyboardJS：一个用于绑定键盘组合的 JavaScript 库，让你脱离快捷键和快捷键组合冲突的痛苦。jquery.hotkeys：jQuery Hotkeys 能让你在代码任何的地方监听键盘事件，并几乎支持所有按键组合。jwerty：令人惊叹的键盘事件处理库。 浏览和引导intro.js：这是一个介绍新功能的很好方式，能一步步地引导用户浏览你的网站和项目。shepherd：通过引导让用户浏览你的应用程序。bootstrap-tour：应用 Twitter Bootstrap 弹出框对产品进行快速简单的引导。tourist：简单、灵活的应用引导介绍库。chardin.js：简单的应用遮罩层介绍。pageguide：使用 jQuery 和 CSS3 的 web 页面元素交互引导库。hopscotch：让开发者更容易向其页面产品添加引导的框架。joyride：基于 jQuery 的功能引导插件。focusable：通过向页面其余部分添加遮罩层，使焦点聚集在特定 DOM 元素。 通知messenger：为你的应用添加 Growl-style 弹框和信息（Crowl 是 Mac OS X 下的一个通知系统）。noty：jQuery 通知插件。pnotify：适用于 Bootstrap、jQuery UI 和 Web Notifications Draft 的 JavaScript 通知库。toastr：用来显示简单的，会自动到期的信息窗口）简单的弹出框通知（toast notificationshumane-js：一个简单、时髦的浏览器通知系统。smoke.js：与框架无关的、能够自定义样式的 JavaScript 弹框系统。 幻灯片Swiper：使用硬件加速过渡的移动设备触控滑块框架。slick：你所需要的最后一个轮播插件。slidesJs：响应式的 jQuery（1.7.1+）幻灯片插件，具有触摸、 CSS3 过渡等特性。FlexSlider：一款令人惊叹的、全响应式的幻灯片 jQuery 插件。unslider：最简单的幻灯片 jQuery 插件。colorbox：轻量、可自定义的灯箱 jQuery 插件。fancyBox：提供了良好优雅的方式，为页面上的图片、html 内容和多媒体添加缩放功能的工具。sly：基于项导航的、支持单向滚动的 JavaScript 库。vegas：向页面添加漂亮的全屏背景的 jQuery 插件，甚至允许幻灯片。Sequence：用于创建响应式的幻灯片、演示、旗帜广告和以步骤为基础的应用的 CSS 动画框架。baguetteBox.js：易于使用的、用纯 JavaScript 实现的遮罩层脚本。reveal.js：用 HTML 创建漂亮演示控件的框架。PhotoSwipe：适用于移动设备和桌面电脑的、模块化和不无依赖框架的 JavaScript 画廊控件。jcSlider：用 CSS 动画实现的响应式幻灯片 jQuery 插件。basic-jquery-slider：易于使用、指定主题和定制化。unslider： 这是最简单的幻灯片 jQuery 插件。viewerjs：原生js实现的图片查看器。jQuery.adaptive-slider：带有自适应颜色标题和导航的幻灯片 jQuery 插件。slidr：可添加一些幻灯片效果。Flickity：可触摸的、响应式的和可轻弹的画廊。 滑块控件Ion.RangeSlider：强大的、易于自定义的范围滑块选择库，支持很多配置和皮肤。jQRangeSlider：支持日期的滑块选择库。noUiSlider：轻量无冗余的、高度定制化的滑块选择库。rangeslider.js：HTML5 input 区域滑块元素。 表单组件输入typeahead.js：快速的、功能齐全的自动补全库。tag-it：处理多标签字段以及标签建议/自动完成的 jQuery UI 插件。At.js：向你的应用添加类似 Github 的自动完成提示功能。Placeholders.js：JavaScript 补全 HTML5 占位符的属性。fancyInput：利用 CSS3 效果让输入更有趣。jQuery-Tags-Input：利用这个 jQuery 插件，可奇妙地将一个简单的文本输入转换成一个酷酷的标签列表。vanilla-masker：一个纯 JavaScript 实现的输入控制库。Ion.CheckRadio：一个为复选框和单选按钮添加样式的 jQuery 库，支持多种皮肤。 日历pickadate.js：对移动设备友好的、响应式的和轻量的 jQuery 日期 &amp; 时间输入选择器。bootstrap-datepicker：基于 bootstrap 的日历选择器。Pikaday：一个崭新的 JavaScript 日期选择器 —— 轻量、无依赖和模块化的 CSS。fullcalendar：全尺寸、支持拖放事件的日历（jQuery 插件）。rome：可定制的日期（和时间）选择器。无依赖，可选 UI。datedropper： datedropper 是一个 jQuery 插件，它提供了快速简易的方式去管理日期输入框。flatpickr： flatpickr 是一个轻量、强大、无依赖的日历和时间选择器插件，支持移动端，并支持React、Ember、Angular和Vue。 选择selectize.js：Selectize 是文本框和选择框的混合体。它基于jQuery，拥有自动完成和键盘感应下拉列表功能，可用于标签、联系人列表等。select2：它基于 jQuery，是选择框（select box）的替代品。支持搜索、远程数据集和无限滚动。chosen：可以让冗长不便的选择框更友好的库。 文件上传jQuery-File-Upload：File Upload 是一个支持多文件选择、文件拖放、进度条、验证和图片、音频、视频预览的 jQuery 插件。dropzone：Dropzone 是一个易于使用且支持多文件拖放的库。其支持图片预览并且拥有很好的进度条效果。flow.js：一个通过 HTML5 的 File API ，提供多个同时链接的、稳定的、容错的、可恢复的/可重新开始的文件上传库。fine-uploader：一个带有进度条、拖放功能和支持直接上传到 S3 （Amazon Simple Storage Service，亚马逊简易存储服务）的多文件上传插件。FileAPI：JavaScript 文件工具集合。支持多文件上传、拖放和文件分块上传。对于图像，支持裁剪、调整大小和根据 EXIF自动调整方向。plupload：处理文件上传的 JavaScript API，其支持多文件选择、文件类型过滤、分块请求、客户端图片缩放和根据不同的运行环境选择 HTML5、Silverlight 和 Flash。 其它form：jQuery 表单插件。Garlic.js：自动在本地保存表单文本和选择框的值，直到表单被提交。Countable：对某个 HTML 元素包含文本的段落数、单词数和字符数进行统计的 JavaScript 函数。card：只需一行代码，让信用卡表单变得更友好。stretchy：自适应大小的 form 元素，表单本应该是这样的。list.js：向表格、列表等 HTML 元素添加搜索、排序、过滤和自适应功能的库。在已有 HTML 上增加可视化。 提示tipsy：基于 jQuery 的 Fackbook 风格的提示工具（tooltip）。opentip：开源且基于 prototype 框架的 JavaScript 工具提示库。qTip2：非常强大的工具提示库。tooltipster：一个工具提示 jQuery 插件。simptip：用 Sass 制作的、简单的工具提示。jquery-popup-overlay：是一个响应式的和可访问性强的模态框（modal）和工具提示框 jQuery 插件。 模态框和弹出框Magnific-Popup：专注于性能、轻量、响应式的灯箱（lightbox）脚本。jquery-popbox：jQuery 提示框插件。jquery.avgrund.js：一种新的定于弹出的模态框 jQuery 插件。vex：新的、拥有高度可配置和易于改变样式功能的对话框库。bootstrap-modal：对 Bootstrap 默认的模态框类进行扩展。其支持响应式、可堆叠和 ajax 等。css-modal：纯 CSS 打造的模态框。jquery-popup-overlay：是一个响应式的和可访问性强的模态框和工具提示框（tooltips）jQuery 插件。layer：国内最多人使用的web弹层组件。 滚动scrollMonitor：滚动发生时，可以监听元素的、简单、快速的 API。headroom：除非你需要显示页面头部（header），否则将隐藏它，以腾出页面头部空间。onepage-scroll：创建一个类似 Apple 的单页面滚动网站（iPhone 5S 网站）。iscroll：高性能、轻量、无依赖、兼容多平台的 JavaScript 滚动组件。skrollr：独立（不依赖 jQuery） 的视差滚动库，适用于移动设备（Android + iOS）和桌面电脑。parallax：面向智能设备的视差引擎。stellar.js：让视差滚动变简单。plax：基于 jQuery 的视差库。jparallax：创建可交互视差效果的 jQuery 插件。fullPage：简单和易于使用的、用于创建全屏滚动网站的插件（也被称为单页面网站）。ScrollMenu：让老旧无聊的滚动条焕然一新。 菜单jQuery-menu-aim：当用户光标放在特定下拉菜单项时触发事件。可制作响应式的、大数据量的下拉菜单，如 Amazon 的。jQuery contextMenu：右键菜单（contextMenu） 管理工具。Slideout：为移动设备的 web 应用制作出响应式的、可触摸滑出的导航菜单。Slide and swipe：一个基于 touchSwipe 库的滑出菜单插件。 表格/栅格jTable：基于 CRUD 表创建 AJAX 的 jQuery 插件。DataTables：这是一个非常灵活的工具，在渐进增强的基础上，将高级的交互效果加到 HTML 表格。（jQuery 插件）floatThead：（jQuery 插件）锁定表格头部，只允许表格内容滚动。适用于任何表格，而且不需要额外的 html 或 css。Masonry：瀑布流式的网格布局库。Packery：使用装箱算法（bin-packing）的网格布局库。支持拖拽布局。Isotope：可过滤和可排序的网格布局的库，它能实现 Masonry、Packery 等布局。 框架Semantic UI：拥有大量主题和元素的 UI 套件。 手势hammer.js：拥有多种触摸手势的 JavaScript 库。touchemulator：在桌面电脑模仿触摸输入。Dragula：超级易于使用的拖拽库。 触摸fastclick.js：去除触屏用户300ms点击延误。dropload.js：移动端下拉刷新，上拉加载更多。touchslide.js：触屏滑动特效。 地图Leaflet：对移动设备友好的、可交互的地图 JavaScript 库。Cesium：开源的、基于 WebGL 实现的虚拟地球仪和地图引擎。gmaps：以最简单的方式使用 Google 地图。polymaps：一个免费的、兼容现代 web 浏览器的、用于制作动态可交互的地图 JavaScript 库。kartograph.js：开源的 Kartograph SVG 地图渲染器。mapbox.js：Mapbox 的 API，Leaflet 的插件。jqvmap：矢量地图 jQuery 插件。OpenLayers3：高性能的、功能丰富的库，能满足你对地图所有需求。 视频/音频prettyembed.js：更完美地嵌入 YouTube —— 拥有很好的选项，如高分辨率的预览图、嵌入选项的高级定制和可选的 FitVids 支持。html5media：能在所有主流浏览器播放多媒体标签中定义的多媒体文件。Play-em JS：Play’em 是一个 JavaScript 组件，它能管理音乐/视频播放顺序，通过在一个 DIV 元素里嵌入几个播放器（Youtube、Soundcloud 和 Vimeo）来控制一系列歌曲的播放。polyplayer：将 YouTube、Soundcloud 和 Vimeo 播放器的 API 统一成一套。flowplayer： HTML5 视频播放器 、Githubmediaelement：让 HTML5、 Flash 播放器和模仿 HTML5 媒介元素 API 的 Silverlight shim，在所有浏览器拥有一致的 UI。、GithubSoundJS：让音频在 web 上运行更简单的库。它为不同浏览器提供了一致的 API。 动画velocity：加速 JavaScript 动画。jquery.transit：拥有超级流畅的 CSS3 变换和过渡的 jQuery 插件。impess.js：在 HTML 文档里，运用 CSS3 变换和过渡制作类似 Prezi 的展现效果。bounce.js：可以立刻创建有趣的 CSS3 动画。GreenSock-JS：适用于所有主流浏览器的高性能 HTML5 动画。TransitionEnd：TransitionEnd 是一个运用 transitonend 事件的、跨浏览器的库。Dynamics.js：用于创建基于物理知识的 CSS 动画库。 图片处理lena.js：拥有滤镜和实用功能的图像处理库。pica：高质量地调整图片大小（拥有快速的、纯 JS 实现的 Lanczos 滤镜算法）。cropper：一个简单的图像裁剪 jQuery 插件。AlloyImage：腾讯前端开源的基于HTML5的专业级图像处理开源引擎。ECMAScript 6es6features：ECMAScript 6 特性概述。es6-features：ECMAScript 6: 特性概述和比较。ECMAScript 6 compatibility table ：Compatibility tables 展示了各种平台上所有 ECMAScript 6 特性的支持程度。Babel (Formerly 6to5)：将 ES6+ 代码转换成纯 ES5。Traceur compiler：ES6 特性转 ES5。包括 classes、generators、promises、destructuring patterns、default parameters 等。 软件开发工具包(SDK)javascript-sdk-design：从工作和个人经验中提炼出来的 JavaScript SDK 设计指导。 大杂烩echo：利用 data-* 属性延迟加载图片。picturefill：响应式图片显示插件，使浏览器支持 srcset、size 属性。platform.js：一个平台检测库，几乎适用于所有 JavaScript 平台。json3：一个现代 JSON 实现库，几乎兼容所有 JavaScript 平台。Logical Or Not：一个关于 JavaScript 特性的游戏。BitSet.js：实现位向量的 JavaScript 库。Edge.js：运行在一个进程中运行.NET和Node.js代码。、GitHub","tags":"javascript"},{"title":"常见的js插件库","url":"/xiaocong/2019/03/06/Js/","text":"常见的js插件库 MVC 框架和库•angular.js – 为网络应用增强 HTML。•aurelia – 一个适用于移动设备、桌面电脑和 web 的客户端 JavaScript 框架。•backbone – 给你的 JS 应用加入带有 Models、Views、Collections 和 Events 的 Backbone。•batman.js – 最适合 Rails 开发者的 JavaScript 框架。•ember.js – 一个旨在创建非凡 web 应用的 JavaScript 框架。•meteor – 一个超简单的、数据库无处不在的、只传输数据的纯 JavaScript web 框架。•ractive – 新一代 DOM 操作。•vue – 一个用于构建可交互界面的、直观快速和可组合的 MVVM 框架。•knockout – Knockout 用 JavaScript 让创建响应式的富 UI 更加容易。•spine – 构建 JavaScript 应用的轻量 MVC 库。•espresso.js – 一个极小的、用于制作用户界面的 JavaScript 库。•canjs – 让 JS 更好、更快、更简单。•react – 用于建构用户界面的库。它是声明式的、高效的和极度灵活的，并使用虚拟 DOM 作为其不同的实现。•react-native – 一个用 React 构建原生应用的框架。•riot – 类 React 库，但很轻量。•thorax – 加强你的 Backbone。•chaplin – 使用 Backbone.js 库的 JavaScript 应用架构。•marionette – 一个 Backbone.js 的复合应用程序库，旨在简化大型 JavaScript 应用结构。•ripple – 一个小巧的、用于构建响应界面的基础框架。•rivets – 轻量却拥有强大的数据绑定和模板解决方案•derby – 让编写实时和协同应用更简单的 MVC 框架，能够在 Node.js 和浏览器同时运行。 •derby-awesome – 很棒的 derby 组件集合。•way.js – 简单、轻量、持久化的双向数据绑定。•mithril.js – Mithril 是一个客户端 MVC 框架（轻量、强大和快速）•jsblocks – jsblocks 是一个更好的 MV-ish 框架。•LiquidLava – 易懂的、用于构建用户界面的 MVC 框架。 文章•The JavaScript that you should know – 关于 JavaScript 函数化概念的文章。 数据可视化Web 数据可视化工具•d3 – 一个对 HTML 和 SVG 进行可视化的 JavaScript 库。•metrics-graphics – 更简洁和拥有更规范的数据图表布局优化算法的库。•pykcharts.js – 经过精心设计后，去除 d3.js 复杂性的 d3.js 图表库。•three.js – JavaScript 3D 库。•Chart.js – 简单的、基于 canvas 标签的 HTML5 图表库。•paper.js – 是矢量图形脚本中的瑞士军刀 —— 使用 HTML5 Canvas 将 Scriptographer 移植到 JavaScript 和浏览器。•fabric.js – JavaScript Canvas 库，SVG 与 Canvas 可以相互解析。•peity – 进度条、线状和饼状图。•raphael – JavaScript 矢量库。•echarts – 商业产品图表。•vis – 动态的、基于浏览器的可视化库。•two.js – 一个渲染器无关的适用于 web 的二维绘图 api 。•g.raphael – 基于 Rapha?l 图表库。•sigma.js – 一个致力于图形绘画的 JavaScript 库。•arbor – 一个使用 web workers 和 jQuery 的图形可视化库。•cubism – 可视化时间序列的 D3 插件。•dc.js – 与 crossfilter 无缝合作的多维图表绘制库，使用 d3.js 渲染。•vega – 一套可视化语法。•processing.js – Processing.js 基于 Web 标准使数据可视化，而无需任何插件。•envisionjs – 动态的 HTML5 可视化。•rickshaw – 用于构建交互式实时图表的 JavaScript 工具包。•flot – 吸引人的、基于 jQuery 的 JavaScript 图表库。•morris.js – 漂亮的时间序列线框图。•nvd3 – 一个为 D3.js 构建可复用图表和图表组件的库。•svg.js – 一个轻量的、用于操作和添加 SVG 动画的库。•heatmap.js – 基于 HTML5 canvas 的热力图 JavaScript 库。•jquery.sparkline – 一个直接在浏览器端生成小型走势图的 jQuery 插件。•xCharts – 一个基于 D3、用于构建自定义图表和图形的库。•trianglify – 基于 d3.js 的低多边形（low poly）风格背景图片生成器。•d3-cloud – 创建词云（word cloud）效果的 JavaScript 库。•d4 – 一个基于 D3 、友好、可复用的 DSL 图表库 。•dimple.js – 基于 d3 的简易商业分析图表库。•chartist-js – 简单的响应式图表。•epoch – 一个通用的实时图表库。•c3 – 基于 D3 的可复用图表库。•BabylonJS – 一个运用 HTML5 和 WebGL 构建 3D 游戏的框架。 类•ClassManager – 世界上最快、最方便的类系统之一。•klass – 用于创建极富表现力的类工具库。•augment – 世界上最小且最快的一流 JavaScript 继承模式。 验证•Parsley.js – 不用写一行 JavaScript 代码即可在前端验证表单。•jquery-validation – jQuery 验证插件。•validator.js – 字符串验证和过滤（在使用用户输入之前清理用户输入中的有害或危险字符的操作）。•validate.js – 受 CodeIgniter 启发的轻量表单验证 JavaScript 库。•validatr – 跨浏览器的 HTML5 表单验证库。•BootstrapValidator – 是验证表单域中最好的 jQuery 插件。要与 Bootstrap 3 一起使用。•is.js – 检查类型、正则表达式、是否存在、时间等。•FieldVal – 多用途验证库。同时支持同步和异步验证。 文件上传•jQuery-File-Upload – File Upload 是一个支持多文件选择、文件拖放、进度条、验证和图片、音频、视频预览的 jQuery 插件。•dropzone – Dropzone 是一个易于使用且支持多文件拖放的库。其支持图片预览并且拥有很好的进度条效果。•flow.js – 一个通过 HTML5 的 File API ，提供多个同时链接的、稳定的、容错的、可恢复的/可重新开始的文件上传库。•fine-uploader – 一个带有进度条、拖放功能和支持直接上传到 S3 （Amazon Simple Storage Service，亚马逊简易存储服务）的多文件上传插件。•FileAPI – JavaScript 文件工具集合。支持多文件上传、拖放和文件分块上传。对于图像，支持裁剪、调整大小和根据 EXIF 自动调整方向。•plupload – 处理文件上传的 JavaScript API，其支持多文件选择、文件类型过滤、分块请求、客户端图片缩放和根据不同的运行环境选择 HTML5、Silverlight 和 Flash。 模态框和弹出框•Magnific-Popup – 专注于性能、轻量、响应式的灯箱（lightbox）脚本。•jquery-popbox – jQuery 提示框插件。•jquery.avgrund.js – 一种新的定于弹出的模态框 jQuery 插件。•vex – 新的、拥有高度可配置和易于改变样式功能的对话框库。•bootstrap-modal – 对 Bootstrap 默认的模态框类进行扩展。其支持响应式、可堆叠和 ajax 等。•css-modal – 纯 CSS 打造的模态框。•jquery-popup-overlay – 是一个响应式的和可访问性强的模态框和工具提示框（tooltips）jQuery 插件。 图像处理•lena.js – 拥有滤镜和实用功能的图像处理库。•pica – 高质量地调整图片大小（拥有快速的、纯 JS 实现的 Lanczos 滤镜算法）。•cropper – 一个简单的图像裁剪 jQuery 插件。 视频/音频•prettyembed.js – 更完美地嵌入 YouTube —— 拥有很好的选项，如高分辨率的预览图、嵌入选项的高级定制和可选的 FitVids 支持。•html5media – 能在所有主流浏览器播放多媒体标签中定义的多媒体文件。http://html5media.info/•Play-em JS – Play’em 是一个 JavaScript 组件，它能管理音乐/视频播放顺序，通过在一个 DIV 元素里嵌入几个播放器（Youtube、Soundcloud 和 Vimeo）来控制一系列歌曲的播放。•polyplayer – 将 YouTube、Soundcloud 和 Vimeo 播放器的 API 统一成一套。•flowplayer – HTML5 视频播放器 http://flowplayer.org/•mediaelement – 让 HTML5、 Flash 播放器和模仿 HTML5 媒介元素 API 的 Silverlight shim，在所有浏览器拥有一致的 UI。http://mediaelementjs.com/•SoundJS – 让音频在 web 上运行更简单的库。它为不同浏览器提供了一致的 API。 表格网格•jTable – 基于 CRUD 表创建 AJAX 的 jQuery 插件。•DataTables – 这是一个非常灵活的工具，在渐进增强的基础上，将高级的交互效果加到 HTML 表格。（jQuery 插件）•floatThead – （jQuery 插件）锁定表格头部，只允许表格内容滚动。适用于任何表格，而且不需要额外的 html 或 css。•Masonry – 瀑布流式的网格布局库。•Packery – 使用装箱算法（bin-packing）的网格布局库。支持拖拽布局。•Isotope – 可过滤和可排序的网格布局的库，它能实现 Masonry、Packery 等布局。 滚动•scrollMonitor – 滚动发生时，可以监听元素的、简单、快速的 API。•headroom – 除非你需要显示页面头部（header），否则将隐藏它，以腾出页面头部空间。•onepage-scroll – 创建一个类似 Apple 的单页面滚动网站（iPhone 5S 网站）。•iscroll – 高性能、轻量、无依赖、兼容多平台的 JavaScript 滚动组件。•skrollr – 独立（不依赖 jQuery） 的视差滚动库，适用于移动设备（Android + iOS）和桌面电脑。•parallax – 面向智能设备的视差引擎。•stellar.js – 让视差滚动变简单。•plax – 基于 jQuery 的视差库。•jparallax – 创建可交互视差效果的 jQuery 插件。•fullPage – 简单和易于使用的、用于创建全屏滚动网站的插件（也被称为单页面网站）。•ScrollMenu – 让老旧无聊的滚动条焕然一新。","tags":"javascript"},{"title":"html5.js让IE（包括IE6）支持HTML5元素方法","url":"/xiaocong/2019/03/05/Html5Js/","text":"html5.js让IE（包括IE6）支持HTML5元素方法 1、引用Google的html5.js文件123&lt;!--[if IE]&gt;&lt;script src=”http://html5shiv.googlecode.com/svn/trunk/html5.js”&gt;&lt;/script&gt;&lt; ![endif]--&gt; 将上代码复制到head部分，记住一定要是head部分（因为IE必须在元素解析前知道这个元素，所以这个js文件不能在其他位置调用，否则失效） 当然，你也可以把代码拿出来自己看着办：html5.js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091 /* HTML5 Shiv v3.6.2pre | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed Uncompressed source: https://github.com/aFarkas/html5shiv*/(function(l, f) &#123; function m() &#123; var a = e.elements; return &quot;string&quot; == typeof a ? a.split(&quot; &quot;) : a &#125; function i(a) &#123; var b = n[a[o]]; b || (b = &#123;&#125;, h++, a[o] = h, n[h] = b); return b &#125; function p(a, b, c) &#123; b || (b = f); if (g) return b.createElement(a); c || (c = i(b)); b = c.cache[a] ? c.cache[a].cloneNode() : r.test(a) ? (c.cache[a] = c.createElem(a)).cloneNode() : c.createElem(a); return b.canHaveChildren &amp;&amp; !s.test(a) ? c.frag.appendChild(b) : b &#125; function t(a, b) &#123; if (!b.cache) b.cache = &#123;&#125;, b.createElem = a.createElement, b.createFrag = a.createDocumentFragment, b.frag = b.createFrag(); a.createElement = function(c) &#123; return !e.shivMethods ? b.createElem(c) : p(c, a, b) &#125;; a.createDocumentFragment = Function(&quot;h,f&quot;, &quot;return function()&#123;var n=f.cloneNode(),c=n.createElement;h.shivMethods&amp;&amp;(&quot; + m().join().replace(/\\w+/g, function(a) &#123; b.createElem(a); b.frag.createElement(a); return &apos;c(&quot;&apos; + a + &apos;&quot;)&apos; &#125;) + &quot;);return n&#125;&quot;)(e, b.frag) &#125; function q(a) &#123; a || (a = f); var b = i(a); if (e.shivCSS &amp;&amp; !j &amp;&amp; !b.hasCSS) &#123; var c, d = a; c = d.createElement(&quot;p&quot;); d = d.getElementsByTagName(&quot;head&quot;)[0] || d.documentElement; c.innerHTML = &quot;x&lt;style&gt;article,aside,figcaption,figure,footer,header,hgroup,main,nav,section&#123;display:block&#125;mark&#123;background:#FF0;color:#000&#125;&lt;/style&gt;&quot;; c = d.insertBefore(c.lastChild, d.firstChild); b.hasCSS = !! c &#125; g || t(a, b); return a &#125; var k = l.html5 || &#123;&#125;, s = /^&lt;|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i, r = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i, j, o = &quot;_html5shiv&quot;, h = 0, n = &#123;&#125;, g; (function() &#123; try &#123; var a = f.createElement(&quot;a&quot;); a.innerHTML = &quot;&lt;xyz&gt;&lt;/xyz&gt;&quot;; j = &quot;hidden&quot; in a; var b; if (!(b = 1 == a.childNodes.length)) &#123; f.createElement(&quot;a&quot;); var c = f.createDocumentFragment(); b = &quot;undefined&quot; == typeof c.cloneNode || &quot;undefined&quot; == typeof c.createDocumentFragment || &quot;undefined&quot; == typeof c.createElement &#125; g = b &#125; catch (d) &#123; g = j = !0 &#125; &#125;)(); var e = &#123; elements: k.elements || &quot;abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup main mark meter nav output progress section summary time video&quot;, version: &quot;3.6.2pre&quot;, shivCSS: !1 !== k.shivCSS, supportsUnknownElements: g, shivMethods: !1 !== k.shivMethods, type: &quot;default&quot;, shivDocument: q, createElement: p, createDocumentFragment: function(a, b) &#123; a || (a = f); if (g) return a.createDocumentFragment(); for (var b = b || i(a), c = b.frag.cloneNode(), d = 0, e = m(), h = e.length; d &lt; h; d++) c.createElement(e[d]); return c &#125; &#125;; l.html5 = e; q(f)&#125;)(this, document); 2、最后在css里面加上这段：/html5/article,aside,dialog,footer,header,section,footer,nav,figure,menu{display:block}","tags":"javascript html"},{"title":"video.js的使用及问题","url":"/xiaocong/2019/03/04/VideoJs/","text":"最近的项目中需要播放视频，鉴于html5元素video的一些坑及不想自己造轮子，于是就找到了web端播放视频使用量最多的插件video.js，video.js是国外开发者开发的，英语本身就不好的我看英文文档简直是折磨，国内又没有中文文档，能搜的到的基本是简单的使用及最基本的api的介绍，想要实现一些自定义功能无从下手，所以我在这里整理一份我所遇到的问题及解决方法 1、视频初始化video.js有两种初始化方式，一种是在video的html标签之中，一种是使用js来进行初始化 1.1、在video中进行初始化1234567891011121314151617181920 &lt;video id=&quot;my-player&quot; class=&quot;video-js&quot; controls preload=&quot;auto&quot; poster=&quot;//vjs.zencdn.net/v/oceans.png&quot; width=&quot;600&quot; height=&quot;400&quot; data-setup=&apos;&#123;&#125;&apos;&gt;&lt;source src=&quot;//vjs.zencdn.net/v/oceans.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/source&gt;&lt;source src=&quot;//vjs.zencdn.net/v/oceans.webm&quot; type=&quot;video/webm&quot;&gt;&lt;/source&gt;&lt;source src=&quot;//vjs.zencdn.net/v/oceans.ogv&quot; type=&quot;video/ogg&quot;&gt;&lt;/source&gt;&lt;p class=&quot;vjs-no-js&quot;&gt; To view this video please enable JavaScript, and consider upgrading to a web browser that &lt;a href=&quot;https://videojs.com/html5-video-support/&quot; target=&quot;_blank&quot;&gt; supports HTML5 video &lt;/a&gt;&lt;/p&gt;&lt;/video&gt; 效果 1.2、使用js进行初始化1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859 &lt;!-- vjs-big-play-centered可使大的播放按钮居住，vjs-fluid可使视频占满容器 --&gt;&lt;video id=&quot;myVideo&quot; class=&quot;video-js vjs-big-play-centered vjs-fluid&quot;&gt; &lt;p class=&quot;vjs-no-js&quot;&gt; To view this video please enable JavaScript, and consider upgrading to a web browser that &lt;a href=&quot;https://videojs.com/html5-video-support/&quot; target=&quot;_blank&quot;&gt; supports HTML5 video &lt;/a&gt; &lt;/p&gt;&lt;/video&gt;&lt;script&gt;var player = videojs(document.getElementById(&apos;myVideo&apos;), &#123; controls: true, // 是否显示控制条 poster: &apos;xxx&apos;, // 视频封面图地址 preload: &apos;auto&apos;, autoplay: false, fluid: true, // 自适应宽高 language: &apos;zh-CN&apos;, // 设置语言 muted: false, // 是否静音 inactivityTimeout: false, controlBar: &#123; // 设置控制条组件 /* 设置控制条里面组件的相关属性及显示与否 &apos;currentTimeDisplay&apos;:true, &apos;timeDivider&apos;:true, &apos;durationDisplay&apos;:true, &apos;remainingTimeDisplay&apos;:false, volumePanel: &#123; inline: false, &#125; */ /* 使用children的形式可以控制每一个控件的位置，以及显示与否 */ children: [ &#123;name: &apos;playToggle&apos;&#125;, // 播放按钮 &#123;name: &apos;currentTimeDisplay&apos;&#125;, // 当前已播放时间 &#123;name: &apos;progressControl&apos;&#125;, // 播放进度条 &#123;name: &apos;durationDisplay&apos;&#125;, // 总时间 &#123; // 倍数播放 name: &apos;playbackRateMenuButton&apos;, &apos;playbackRates&apos;: [0.5, 1, 1.5, 2, 2.5] &#125;, &#123; name: &apos;volumePanel&apos;, // 音量控制 inline: false, // 不使用水平方式 &#125;, &#123;name: &apos;FullscreenToggle&apos;&#125; // 全屏 ] &#125;, sources:[ // 视频源 &#123; src: &apos;//vjs.zencdn.net/v/oceans.mp4&apos;, type: &apos;video/mp4&apos;, poster: &apos;//vjs.zencdn.net/v/oceans.png&apos; &#125; ]&#125;, function ()&#123; console.log(&apos;视频可以播放了&apos;,this);&#125;);&lt;/script&gt; 2、controlBar组件的说明 playToggle, //播放暂停按钮 volumeMenuButton,//音量控制 currentTimeDisplay,//当前播放时间 timeDivider, // ‘/‘ 分隔符 durationDisplay, //总时间 progressControl, //点播流时，播放进度条，seek控制 liveDisplay, //直播流时，显示LIVE remainingTimeDisplay, //当前播放时间 playbackRateMenuButton, //播放速率，当前只有html5模式下才支持设置播放速率 fullscreenToggle //全屏控制 currentTimeDisplay,timeDivider,durationDisplay是相对于 remainingTimeDisplay的另一套组件，后者只显示当前播放时间，前者还显示总时间。若要显示成前者这种模式，即 ‘当前时间/总时间’，可以在初始化播放器选项中配置： 12345678var myPlayer = neplayer(&apos;my-video&apos;, &#123;controlBar:&#123;&apos;currentTimeDisplay&apos;:true,&apos;timeDivider&apos;:true,&apos;durationDisplay&apos;:true,&apos;remainingTimeDisplay&apos;:false&#125;&#125;, function() &#123; console.log(&apos;播放器初始化完成&apos;);&#125;); 3、video.js样式修改1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071.video-js&#123; /* 给.video-js设置字体大小以统一各浏览器样式表现，因为video.js采用的是em单位 */ font-size: 14px;&#125;.video-js button&#123; outline: none;&#125;.video-js.vjs-fluid,.video-js.vjs-16-9,.video-js.vjs-4-3&#123; /* 视频占满容器高度 */ height: 100%; background-color: #161616;&#125;.vjs-poster&#123; background-color: #161616;&#125;.video-js .vjs-big-play-button&#123; /* 中间大的播放按钮 */ font-size: 2.5em; line-height: 2.3em; height: 2.5em; width: 2.5em; -webkit-border-radius: 2.5em; -moz-border-radius: 2.5em; border-radius: 2.5em; background-color: rgba(115,133,159,.5); border-width: 0.12em; margin-top: -1.25em; margin-left: -1.75em;&#125;.video-js.vjs-paused .vjs-big-play-button&#123; /* 视频暂停时显示播放按钮 */ display: block;&#125;.video-js.vjs-error .vjs-big-play-button&#123; /* 视频加载出错时隐藏播放按钮 */ display: none;&#125;.vjs-loading-spinner &#123; /* 加载圆圈 */ font-size: 2.5em; width: 2em; height: 2em; border-radius: 1em; margin-top: -1em; margin-left: -1.5em;&#125;.video-js .vjs-control-bar&#123; /* 控制条默认显示 */ display: flex;&#125;.video-js .vjs-time-control&#123;display:block;&#125;.video-js .vjs-remaining-time&#123;display: none;&#125;.vjs-button &gt; .vjs-icon-placeholder:before&#123; /* 控制条所有图标，图标字体大小最好使用px单位，如果使用em，各浏览器表现可能会不大一样 */ font-size: 22px; line-height: 1.9;&#125;.video-js .vjs-playback-rate .vjs-playback-rate-value&#123; line-height: 2.4; font-size: 18px;&#125;/* 进度条背景色 */.video-js .vjs-play-progress&#123; color: #ffb845; background-color: #ffb845;&#125;.video-js .vjs-progress-control .vjs-mouse-display&#123; background-color: #ffb845;&#125;.vjs-mouse-display .vjs-time-tooltip&#123; padding-bottom: 6px; background-color: #ffb845;&#125;.video-js .vjs-play-progress .vjs-time-tooltip&#123; display: none!important;&#125; 4、动态切换视频12345678910111213141516&lt;script&gt; var data = &#123; src: &apos;xxx.mp4&apos;, type: &apos;video/mp4&apos; &#125;; var player = videojs(&apos;myVideo&apos;, &#123;...&#125;); player.pause(); player.src(data); player.load(data); // 动态切换poster player.posterImage.setSrc(&apos;xxx.jpg&apos;); player.play(); // 销毁videojs //player.dispose();&lt;/script&gt; 5、设置语言5.1传统形式开发对于使用script标签形式的方式引入video.js，只需要在页面中引入你需要的语言包即可 1234567891011121314&lt;script src=&quot;//example.com/path/to/lang/es.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;//example.com/path/to/lang/zh-CN.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;//example.com/path/to/lang/zh-TW.js&quot;&gt;&lt;/script&gt;&lt;script&gt;var player = videojs(&apos;myVideo&apos;, &#123; language: &apos;zh-CN&apos; // 初始化时设置语言，立即生效&#125;);/* 动态切换语言 使用这种方式进行动态切换不会立即生效，必须有所操作后才会生效。如播放按钮，必须点击一次播放按钮后播放按钮的提示文字才会改变 *///player.language(&apos;zh-TW&apos;);&lt;/script&gt; 5.2、vue开发12345678import Video from &apos;video.js&apos;/* 不能直接引入js，否则会报错：videojs is not defined import &apos;video.js/dist/lang/zh-CN.js&apos; */import video_zhCN from &apos;video.js/dist/lang/zh-CN.json&apos;import video_en from &apos;video.js/dist/lang/en.json&apos;import &apos;video.js/dist/video-js.css&apos;Video.addLanguage(&apos;zh-CN&apos;, video_zhCN);Video.addLanguage(&apos;en&apos;, video_en); 6、解决在iPhone中播放时自动全屏问题在iPhone设备上播放视频时(微信浏览器上也会有这个问题)会自动全屏，这里的全屏并不是常规的手机横屏那种全屏，而是类似于一个modal弹窗的全屏，解决办法就是在video标签中添加playsinline=”true”属性 12345&lt;video webkit-playsinline=&quot;true&quot; playsinline=&quot;true&quot; class=&quot;video-js vjs-big-play-centered vjs-fluid&quot;&gt;&lt;/video&gt; 7、参考文章 视频云web播放器样式和组件自定义 Video.js 踩坑简单入门 免费视频播放器videojs中文教程","tags":"javascript vue"},{"title":"typora-vue-theme主题介绍","url":"/xiaocong/2019/02/07/hello-world/","text":"欢迎来到 Hexo! 这是你的第一篇文章。查看文档了解更多信息。如果你在使用Hexo时遇到任何问题，你可以在故障排除中找到答案，或者你可以在GitHub上问我。 Quick Start ### Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":"介绍 前端"},{"title":"tags","url":"/xiaocong/tags/index.html","text":"","tags":""},{"title":"分类","url":"/xiaocong/categories/index.html","text":"","tags":""},{"title":"about","url":"/xiaocong/about/index.html","text":"","tags":""}]}